/**
 * Location API
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIREVERSEApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIREVERSEApi::OAIREVERSEApi() {}

OAIREVERSEApi::~OAIREVERSEApi() {}

OAIREVERSEApi::OAIREVERSEApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIREVERSEApi::reverse(double lat, double lon, qint64 zoom, QString* accept_language) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/reverse.php");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lat"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lat)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("lon"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(lon)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("zoom"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(zoom)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("accept-language"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(accept_language)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIREVERSEApi::reverseCallback);

    worker->execute(&input);
}

void
OAIREVERSEApi::reverseCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIObject* output = static_cast<OAIObject*>(create(json, QString("OAIObject")));
    auto wrapper = new OAIQObjectWrapper<OAIObject*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit reverseSignal(output);
    } else {
        emit reverseSignalE(output, error_type, error_str);
        emit reverseSignalEFull(worker, error_type, error_str);
    }
}


}
