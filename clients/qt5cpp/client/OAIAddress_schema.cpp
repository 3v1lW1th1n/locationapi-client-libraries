/**
 * Location API
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIAddress_schema.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIAddress_schema::OAIAddress_schema(QString json) {
    init();
    this->fromJson(json);
}

OAIAddress_schema::OAIAddress_schema() {
    init();
}

OAIAddress_schema::~OAIAddress_schema() {
    this->cleanup();
}

void
OAIAddress_schema::init() {
    lat = new QString("");
    m_lat_isSet = false;
    lon = new QString("");
    m_lon_isSet = false;
    display_name = new QString("");
    m_display_name_isSet = false;
    house_number = new QString("");
    m_house_number_isSet = false;
    road = new QString("");
    m_road_isSet = false;
    neighborhood = new QString("");
    m_neighborhood_isSet = false;
    suburb = new QString("");
    m_suburb_isSet = false;
    city = new QString("");
    m_city_isSet = false;
    county = new QString("");
    m_county_isSet = false;
    country = new QString("");
    m_country_isSet = false;
    country_code = new QString("");
    m_country_code_isSet = false;
    postal_code = new QString("");
    m_postal_code_isSet = false;
}

void
OAIAddress_schema::cleanup() {
    if(lat != nullptr) { 
        delete lat;
    }
    if(lon != nullptr) { 
        delete lon;
    }
    if(display_name != nullptr) { 
        delete display_name;
    }
    if(house_number != nullptr) { 
        delete house_number;
    }
    if(road != nullptr) { 
        delete road;
    }
    if(neighborhood != nullptr) { 
        delete neighborhood;
    }
    if(suburb != nullptr) { 
        delete suburb;
    }
    if(city != nullptr) { 
        delete city;
    }
    if(county != nullptr) { 
        delete county;
    }
    if(country != nullptr) { 
        delete country;
    }
    if(country_code != nullptr) { 
        delete country_code;
    }
    if(postal_code != nullptr) { 
        delete postal_code;
    }
}

OAIAddress_schema*
OAIAddress_schema::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIAddress_schema::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&lat, pJson["lat"], "QString", "QString");
    
    ::OpenAPI::setValue(&lon, pJson["lon"], "QString", "QString");
    
    ::OpenAPI::setValue(&display_name, pJson["display_name"], "QString", "QString");
    
    ::OpenAPI::setValue(&house_number, pJson["house_number"], "QString", "QString");
    
    ::OpenAPI::setValue(&road, pJson["road"], "QString", "QString");
    
    ::OpenAPI::setValue(&neighborhood, pJson["neighborhood"], "QString", "QString");
    
    ::OpenAPI::setValue(&suburb, pJson["suburb"], "QString", "QString");
    
    ::OpenAPI::setValue(&city, pJson["city"], "QString", "QString");
    
    ::OpenAPI::setValue(&county, pJson["county"], "QString", "QString");
    
    ::OpenAPI::setValue(&country, pJson["country"], "QString", "QString");
    
    ::OpenAPI::setValue(&country_code, pJson["country_code"], "QString", "QString");
    
    ::OpenAPI::setValue(&postal_code, pJson["postal_code"], "QString", "QString");
    
}

QString
OAIAddress_schema::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIAddress_schema::asJsonObject() {
    QJsonObject obj;
    if(lat != nullptr && *lat != QString("")){
        toJsonValue(QString("lat"), lat, obj, QString("QString"));
    }
    if(lon != nullptr && *lon != QString("")){
        toJsonValue(QString("lon"), lon, obj, QString("QString"));
    }
    if(display_name != nullptr && *display_name != QString("")){
        toJsonValue(QString("display_name"), display_name, obj, QString("QString"));
    }
    if(house_number != nullptr && *house_number != QString("")){
        toJsonValue(QString("house_number"), house_number, obj, QString("QString"));
    }
    if(road != nullptr && *road != QString("")){
        toJsonValue(QString("road"), road, obj, QString("QString"));
    }
    if(neighborhood != nullptr && *neighborhood != QString("")){
        toJsonValue(QString("neighborhood"), neighborhood, obj, QString("QString"));
    }
    if(suburb != nullptr && *suburb != QString("")){
        toJsonValue(QString("suburb"), suburb, obj, QString("QString"));
    }
    if(city != nullptr && *city != QString("")){
        toJsonValue(QString("city"), city, obj, QString("QString"));
    }
    if(county != nullptr && *county != QString("")){
        toJsonValue(QString("county"), county, obj, QString("QString"));
    }
    if(country != nullptr && *country != QString("")){
        toJsonValue(QString("country"), country, obj, QString("QString"));
    }
    if(country_code != nullptr && *country_code != QString("")){
        toJsonValue(QString("country_code"), country_code, obj, QString("QString"));
    }
    if(postal_code != nullptr && *postal_code != QString("")){
        toJsonValue(QString("postal_code"), postal_code, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIAddress_schema::getLat() {
    return lat;
}
void
OAIAddress_schema::setLat(QString* lat) {
    this->lat = lat;
    this->m_lat_isSet = true;
}

QString*
OAIAddress_schema::getLon() {
    return lon;
}
void
OAIAddress_schema::setLon(QString* lon) {
    this->lon = lon;
    this->m_lon_isSet = true;
}

QString*
OAIAddress_schema::getDisplayName() {
    return display_name;
}
void
OAIAddress_schema::setDisplayName(QString* display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

QString*
OAIAddress_schema::getHouseNumber() {
    return house_number;
}
void
OAIAddress_schema::setHouseNumber(QString* house_number) {
    this->house_number = house_number;
    this->m_house_number_isSet = true;
}

QString*
OAIAddress_schema::getRoad() {
    return road;
}
void
OAIAddress_schema::setRoad(QString* road) {
    this->road = road;
    this->m_road_isSet = true;
}

QString*
OAIAddress_schema::getNeighborhood() {
    return neighborhood;
}
void
OAIAddress_schema::setNeighborhood(QString* neighborhood) {
    this->neighborhood = neighborhood;
    this->m_neighborhood_isSet = true;
}

QString*
OAIAddress_schema::getSuburb() {
    return suburb;
}
void
OAIAddress_schema::setSuburb(QString* suburb) {
    this->suburb = suburb;
    this->m_suburb_isSet = true;
}

QString*
OAIAddress_schema::getCity() {
    return city;
}
void
OAIAddress_schema::setCity(QString* city) {
    this->city = city;
    this->m_city_isSet = true;
}

QString*
OAIAddress_schema::getCounty() {
    return county;
}
void
OAIAddress_schema::setCounty(QString* county) {
    this->county = county;
    this->m_county_isSet = true;
}

QString*
OAIAddress_schema::getCountry() {
    return country;
}
void
OAIAddress_schema::setCountry(QString* country) {
    this->country = country;
    this->m_country_isSet = true;
}

QString*
OAIAddress_schema::getCountryCode() {
    return country_code;
}
void
OAIAddress_schema::setCountryCode(QString* country_code) {
    this->country_code = country_code;
    this->m_country_code_isSet = true;
}

QString*
OAIAddress_schema::getPostalCode() {
    return postal_code;
}
void
OAIAddress_schema::setPostalCode(QString* postal_code) {
    this->postal_code = postal_code;
    this->m_postal_code_isSet = true;
}


bool
OAIAddress_schema::isSet(){
    bool isObjectUpdated = false;
    do{
        if(lat != nullptr && *lat != QString("")){ isObjectUpdated = true; break;}
        if(lon != nullptr && *lon != QString("")){ isObjectUpdated = true; break;}
        if(display_name != nullptr && *display_name != QString("")){ isObjectUpdated = true; break;}
        if(house_number != nullptr && *house_number != QString("")){ isObjectUpdated = true; break;}
        if(road != nullptr && *road != QString("")){ isObjectUpdated = true; break;}
        if(neighborhood != nullptr && *neighborhood != QString("")){ isObjectUpdated = true; break;}
        if(suburb != nullptr && *suburb != QString("")){ isObjectUpdated = true; break;}
        if(city != nullptr && *city != QString("")){ isObjectUpdated = true; break;}
        if(county != nullptr && *county != QString("")){ isObjectUpdated = true; break;}
        if(country != nullptr && *country != QString("")){ isObjectUpdated = true; break;}
        if(country_code != nullptr && *country_code != QString("")){ isObjectUpdated = true; break;}
        if(postal_code != nullptr && *postal_code != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

