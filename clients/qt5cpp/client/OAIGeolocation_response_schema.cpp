/**
 * Location API
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGeolocation_response_schema.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGeolocation_response_schema::OAIGeolocation_response_schema(QString json) {
    init();
    this->fromJson(json);
}

OAIGeolocation_response_schema::OAIGeolocation_response_schema() {
    init();
}

OAIGeolocation_response_schema::~OAIGeolocation_response_schema() {
    this->cleanup();
}

void
OAIGeolocation_response_schema::init() {
    status = new QString("");
    m_status_isSet = false;
    message = new QString("");
    m_message_isSet = false;
    balance = 0L;
    m_balance_isSet = false;
    balance_slots = 0L;
    m_balance_slots_isSet = false;
    lat = 0.0;
    m_lat_isSet = false;
    lon = 0.0;
    m_lon_isSet = false;
    accuracy = 0L;
    m_accuracy_isSet = false;
    address = new QString("");
    m_address_isSet = false;
    address_details = new OAIAddress_details_schema();
    m_address_details_isSet = false;
    aged = 0;
    m_aged_isSet = false;
    fallback = new OAIFallback_schema();
    m_fallback_isSet = false;
}

void
OAIGeolocation_response_schema::cleanup() {
    if(status != nullptr) { 
        delete status;
    }
    if(message != nullptr) { 
        delete message;
    }





    if(address != nullptr) { 
        delete address;
    }
    if(address_details != nullptr) { 
        delete address_details;
    }

    if(fallback != nullptr) { 
        delete fallback;
    }
}

OAIGeolocation_response_schema*
OAIGeolocation_response_schema::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGeolocation_response_schema::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&status, pJson["status"], "QString", "QString");
    
    ::OpenAPI::setValue(&message, pJson["message"], "QString", "QString");
    
    ::OpenAPI::setValue(&balance, pJson["balance"], "qint64", "");
    
    ::OpenAPI::setValue(&balance_slots, pJson["balance_slots"], "qint64", "");
    
    ::OpenAPI::setValue(&lat, pJson["lat"], "double", "");
    
    ::OpenAPI::setValue(&lon, pJson["lon"], "double", "");
    
    ::OpenAPI::setValue(&accuracy, pJson["accuracy"], "qint64", "");
    
    ::OpenAPI::setValue(&address, pJson["address"], "QString", "QString");
    
    ::OpenAPI::setValue(&address_details, pJson["address_details"], "OAIAddress_details_schema", "OAIAddress_details_schema");
    
    ::OpenAPI::setValue(&aged, pJson["aged"], "qint32", "");
    
    ::OpenAPI::setValue(&fallback, pJson["fallback"], "OAIFallback_schema", "OAIFallback_schema");
    
}

QString
OAIGeolocation_response_schema::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGeolocation_response_schema::asJsonObject() {
    QJsonObject obj;
    if(status != nullptr && *status != QString("")){
        toJsonValue(QString("status"), status, obj, QString("QString"));
    }
    if(message != nullptr && *message != QString("")){
        toJsonValue(QString("message"), message, obj, QString("QString"));
    }
    if(m_balance_isSet){
        obj.insert("balance", QJsonValue(balance));
    }
    if(m_balance_slots_isSet){
        obj.insert("balance_slots", QJsonValue(balance_slots));
    }
    if(m_lat_isSet){
        obj.insert("lat", QJsonValue(lat));
    }
    if(m_lon_isSet){
        obj.insert("lon", QJsonValue(lon));
    }
    if(m_accuracy_isSet){
        obj.insert("accuracy", QJsonValue(accuracy));
    }
    if(address != nullptr && *address != QString("")){
        toJsonValue(QString("address"), address, obj, QString("QString"));
    }
    if((address_details != nullptr) && (address_details->isSet())){
        toJsonValue(QString("address_details"), address_details, obj, QString("OAIAddress_details_schema"));
    }
    if(m_aged_isSet){
        obj.insert("aged", QJsonValue(aged));
    }
    if((fallback != nullptr) && (fallback->isSet())){
        toJsonValue(QString("fallback"), fallback, obj, QString("OAIFallback_schema"));
    }

    return obj;
}

QString*
OAIGeolocation_response_schema::getStatus() {
    return status;
}
void
OAIGeolocation_response_schema::setStatus(QString* status) {
    this->status = status;
    this->m_status_isSet = true;
}

QString*
OAIGeolocation_response_schema::getMessage() {
    return message;
}
void
OAIGeolocation_response_schema::setMessage(QString* message) {
    this->message = message;
    this->m_message_isSet = true;
}

qint64
OAIGeolocation_response_schema::getBalance() {
    return balance;
}
void
OAIGeolocation_response_schema::setBalance(qint64 balance) {
    this->balance = balance;
    this->m_balance_isSet = true;
}

qint64
OAIGeolocation_response_schema::getBalanceSlots() {
    return balance_slots;
}
void
OAIGeolocation_response_schema::setBalanceSlots(qint64 balance_slots) {
    this->balance_slots = balance_slots;
    this->m_balance_slots_isSet = true;
}

double
OAIGeolocation_response_schema::getLat() {
    return lat;
}
void
OAIGeolocation_response_schema::setLat(double lat) {
    this->lat = lat;
    this->m_lat_isSet = true;
}

double
OAIGeolocation_response_schema::getLon() {
    return lon;
}
void
OAIGeolocation_response_schema::setLon(double lon) {
    this->lon = lon;
    this->m_lon_isSet = true;
}

qint64
OAIGeolocation_response_schema::getAccuracy() {
    return accuracy;
}
void
OAIGeolocation_response_schema::setAccuracy(qint64 accuracy) {
    this->accuracy = accuracy;
    this->m_accuracy_isSet = true;
}

QString*
OAIGeolocation_response_schema::getAddress() {
    return address;
}
void
OAIGeolocation_response_schema::setAddress(QString* address) {
    this->address = address;
    this->m_address_isSet = true;
}

OAIAddress_details_schema*
OAIGeolocation_response_schema::getAddressDetails() {
    return address_details;
}
void
OAIGeolocation_response_schema::setAddressDetails(OAIAddress_details_schema* address_details) {
    this->address_details = address_details;
    this->m_address_details_isSet = true;
}

qint32
OAIGeolocation_response_schema::getAged() {
    return aged;
}
void
OAIGeolocation_response_schema::setAged(qint32 aged) {
    this->aged = aged;
    this->m_aged_isSet = true;
}

OAIFallback_schema*
OAIGeolocation_response_schema::getFallback() {
    return fallback;
}
void
OAIGeolocation_response_schema::setFallback(OAIFallback_schema* fallback) {
    this->fallback = fallback;
    this->m_fallback_isSet = true;
}


bool
OAIGeolocation_response_schema::isSet(){
    bool isObjectUpdated = false;
    do{
        if(status != nullptr && *status != QString("")){ isObjectUpdated = true; break;}
        if(message != nullptr && *message != QString("")){ isObjectUpdated = true; break;}
        if(m_balance_isSet){ isObjectUpdated = true; break;}
        if(m_balance_slots_isSet){ isObjectUpdated = true; break;}
        if(m_lat_isSet){ isObjectUpdated = true; break;}
        if(m_lon_isSet){ isObjectUpdated = true; break;}
        if(m_accuracy_isSet){ isObjectUpdated = true; break;}
        if(address != nullptr && *address != QString("")){ isObjectUpdated = true; break;}
        if(address_details != nullptr && address_details->isSet()){ isObjectUpdated = true; break;}
        if(m_aged_isSet){ isObjectUpdated = true; break;}
        if(fallback != nullptr && fallback->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

