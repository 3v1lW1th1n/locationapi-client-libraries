/**
 * Location API
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIAddress_details_schema.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIAddress_details_schema::OAIAddress_details_schema(QString json) {
    init();
    this->fromJson(json);
}

OAIAddress_details_schema::OAIAddress_details_schema() {
    init();
}

OAIAddress_details_schema::~OAIAddress_details_schema() {
    this->cleanup();
}

void
OAIAddress_details_schema::init() {
    area = new QString("");
    m_area_isSet = false;
    locality = new QString("");
    m_locality_isSet = false;
    district = new QString("");
    m_district_isSet = false;
    county = new QString("");
    m_county_isSet = false;
    city = new QString("");
    m_city_isSet = false;
    state = new QString("");
    m_state_isSet = false;
    country = new QString("");
    m_country_isSet = false;
    country_code = new QString("");
    m_country_code_isSet = false;
    postal_code = new QString("");
    m_postal_code_isSet = false;
}

void
OAIAddress_details_schema::cleanup() {
    if(area != nullptr) { 
        delete area;
    }
    if(locality != nullptr) { 
        delete locality;
    }
    if(district != nullptr) { 
        delete district;
    }
    if(county != nullptr) { 
        delete county;
    }
    if(city != nullptr) { 
        delete city;
    }
    if(state != nullptr) { 
        delete state;
    }
    if(country != nullptr) { 
        delete country;
    }
    if(country_code != nullptr) { 
        delete country_code;
    }
    if(postal_code != nullptr) { 
        delete postal_code;
    }
}

OAIAddress_details_schema*
OAIAddress_details_schema::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIAddress_details_schema::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&area, pJson["area"], "QString", "QString");
    
    ::OpenAPI::setValue(&locality, pJson["locality"], "QString", "QString");
    
    ::OpenAPI::setValue(&district, pJson["district"], "QString", "QString");
    
    ::OpenAPI::setValue(&county, pJson["county"], "QString", "QString");
    
    ::OpenAPI::setValue(&city, pJson["city"], "QString", "QString");
    
    ::OpenAPI::setValue(&state, pJson["state"], "QString", "QString");
    
    ::OpenAPI::setValue(&country, pJson["country"], "QString", "QString");
    
    ::OpenAPI::setValue(&country_code, pJson["country_code"], "QString", "QString");
    
    ::OpenAPI::setValue(&postal_code, pJson["postal_code"], "QString", "QString");
    
}

QString
OAIAddress_details_schema::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIAddress_details_schema::asJsonObject() {
    QJsonObject obj;
    if(area != nullptr && *area != QString("")){
        toJsonValue(QString("area"), area, obj, QString("QString"));
    }
    if(locality != nullptr && *locality != QString("")){
        toJsonValue(QString("locality"), locality, obj, QString("QString"));
    }
    if(district != nullptr && *district != QString("")){
        toJsonValue(QString("district"), district, obj, QString("QString"));
    }
    if(county != nullptr && *county != QString("")){
        toJsonValue(QString("county"), county, obj, QString("QString"));
    }
    if(city != nullptr && *city != QString("")){
        toJsonValue(QString("city"), city, obj, QString("QString"));
    }
    if(state != nullptr && *state != QString("")){
        toJsonValue(QString("state"), state, obj, QString("QString"));
    }
    if(country != nullptr && *country != QString("")){
        toJsonValue(QString("country"), country, obj, QString("QString"));
    }
    if(country_code != nullptr && *country_code != QString("")){
        toJsonValue(QString("country_code"), country_code, obj, QString("QString"));
    }
    if(postal_code != nullptr && *postal_code != QString("")){
        toJsonValue(QString("postal_code"), postal_code, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIAddress_details_schema::getArea() {
    return area;
}
void
OAIAddress_details_schema::setArea(QString* area) {
    this->area = area;
    this->m_area_isSet = true;
}

QString*
OAIAddress_details_schema::getLocality() {
    return locality;
}
void
OAIAddress_details_schema::setLocality(QString* locality) {
    this->locality = locality;
    this->m_locality_isSet = true;
}

QString*
OAIAddress_details_schema::getDistrict() {
    return district;
}
void
OAIAddress_details_schema::setDistrict(QString* district) {
    this->district = district;
    this->m_district_isSet = true;
}

QString*
OAIAddress_details_schema::getCounty() {
    return county;
}
void
OAIAddress_details_schema::setCounty(QString* county) {
    this->county = county;
    this->m_county_isSet = true;
}

QString*
OAIAddress_details_schema::getCity() {
    return city;
}
void
OAIAddress_details_schema::setCity(QString* city) {
    this->city = city;
    this->m_city_isSet = true;
}

QString*
OAIAddress_details_schema::getState() {
    return state;
}
void
OAIAddress_details_schema::setState(QString* state) {
    this->state = state;
    this->m_state_isSet = true;
}

QString*
OAIAddress_details_schema::getCountry() {
    return country;
}
void
OAIAddress_details_schema::setCountry(QString* country) {
    this->country = country;
    this->m_country_isSet = true;
}

QString*
OAIAddress_details_schema::getCountryCode() {
    return country_code;
}
void
OAIAddress_details_schema::setCountryCode(QString* country_code) {
    this->country_code = country_code;
    this->m_country_code_isSet = true;
}

QString*
OAIAddress_details_schema::getPostalCode() {
    return postal_code;
}
void
OAIAddress_details_schema::setPostalCode(QString* postal_code) {
    this->postal_code = postal_code;
    this->m_postal_code_isSet = true;
}


bool
OAIAddress_details_schema::isSet(){
    bool isObjectUpdated = false;
    do{
        if(area != nullptr && *area != QString("")){ isObjectUpdated = true; break;}
        if(locality != nullptr && *locality != QString("")){ isObjectUpdated = true; break;}
        if(district != nullptr && *district != QString("")){ isObjectUpdated = true; break;}
        if(county != nullptr && *county != QString("")){ isObjectUpdated = true; break;}
        if(city != nullptr && *city != QString("")){ isObjectUpdated = true; break;}
        if(state != nullptr && *state != QString("")){ isObjectUpdated = true; break;}
        if(country != nullptr && *country != QString("")){ isObjectUpdated = true; break;}
        if(country_code != nullptr && *country_code != QString("")){ isObjectUpdated = true; break;}
        if(postal_code != nullptr && *postal_code != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

