/**
 * Location API
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIWifi_schema.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIWifi_schema::OAIWifi_schema(QString json) {
    init();
    this->fromJson(json);
}

OAIWifi_schema::OAIWifi_schema() {
    init();
}

OAIWifi_schema::~OAIWifi_schema() {
    this->cleanup();
}

void
OAIWifi_schema::init() {
    bssid = new QString("");
    m_bssid_isSet = false;
    channel = 0L;
    m_channel_isSet = false;
    frequency = 0L;
    m_frequency_isSet = false;
    signal = 0L;
    m_signal_isSet = false;
    signal_to_noise_ratio = 0L;
    m_signal_to_noise_ratio_isSet = false;
}

void
OAIWifi_schema::cleanup() {
    if(bssid != nullptr) { 
        delete bssid;
    }




}

OAIWifi_schema*
OAIWifi_schema::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIWifi_schema::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&bssid, pJson["bssid"], "QString", "QString");
    
    ::OpenAPI::setValue(&channel, pJson["channel"], "qint64", "");
    
    ::OpenAPI::setValue(&frequency, pJson["frequency"], "qint64", "");
    
    ::OpenAPI::setValue(&signal, pJson["signal"], "qint64", "");
    
    ::OpenAPI::setValue(&signal_to_noise_ratio, pJson["signalToNoiseRatio"], "qint64", "");
    
}

QString
OAIWifi_schema::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIWifi_schema::asJsonObject() {
    QJsonObject obj;
    if(bssid != nullptr && *bssid != QString("")){
        toJsonValue(QString("bssid"), bssid, obj, QString("QString"));
    }
    if(m_channel_isSet){
        obj.insert("channel", QJsonValue(channel));
    }
    if(m_frequency_isSet){
        obj.insert("frequency", QJsonValue(frequency));
    }
    if(m_signal_isSet){
        obj.insert("signal", QJsonValue(signal));
    }
    if(m_signal_to_noise_ratio_isSet){
        obj.insert("signalToNoiseRatio", QJsonValue(signal_to_noise_ratio));
    }

    return obj;
}

QString*
OAIWifi_schema::getBssid() {
    return bssid;
}
void
OAIWifi_schema::setBssid(QString* bssid) {
    this->bssid = bssid;
    this->m_bssid_isSet = true;
}

qint64
OAIWifi_schema::getChannel() {
    return channel;
}
void
OAIWifi_schema::setChannel(qint64 channel) {
    this->channel = channel;
    this->m_channel_isSet = true;
}

qint64
OAIWifi_schema::getFrequency() {
    return frequency;
}
void
OAIWifi_schema::setFrequency(qint64 frequency) {
    this->frequency = frequency;
    this->m_frequency_isSet = true;
}

qint64
OAIWifi_schema::getSignal() {
    return signal;
}
void
OAIWifi_schema::setSignal(qint64 signal) {
    this->signal = signal;
    this->m_signal_isSet = true;
}

qint64
OAIWifi_schema::getSignalToNoiseRatio() {
    return signal_to_noise_ratio;
}
void
OAIWifi_schema::setSignalToNoiseRatio(qint64 signal_to_noise_ratio) {
    this->signal_to_noise_ratio = signal_to_noise_ratio;
    this->m_signal_to_noise_ratio_isSet = true;
}


bool
OAIWifi_schema::isSet(){
    bool isObjectUpdated = false;
    do{
        if(bssid != nullptr && *bssid != QString("")){ isObjectUpdated = true; break;}
        if(m_channel_isSet){ isObjectUpdated = true; break;}
        if(m_frequency_isSet){ isObjectUpdated = true; break;}
        if(m_signal_isSet){ isObjectUpdated = true; break;}
        if(m_signal_to_noise_ratio_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

