/**
 * Location API
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIGeolocation_schema.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIGeolocation_schema::OAIGeolocation_schema(QString json) {
    init();
    this->fromJson(json);
}

OAIGeolocation_schema::OAIGeolocation_schema() {
    init();
}

OAIGeolocation_schema::~OAIGeolocation_schema() {
    this->cleanup();
}

void
OAIGeolocation_schema::init() {
    token = new QString("");
    m_token_isSet = false;
    id = new QString("");
    m_id_isSet = false;
    radio = new OAIRadio_schema();
    m_radio_isSet = false;
    mcc = 0L;
    m_mcc_isSet = false;
    mnc = 0L;
    m_mnc_isSet = false;
    cells = new QList<OAICell_schema*>();
    m_cells_isSet = false;
    wifi = new QList<OAIWifi_schema*>();
    m_wifi_isSet = false;
    fallbacks = new OAIFallback_schema();
    m_fallbacks_isSet = false;
    address = new OAIGeolocation_address_schema();
    m_address_isSet = false;
    ip = new QString("");
    m_ip_isSet = false;
    bt = new OAIBt_schema();
    m_bt_isSet = false;
}

void
OAIGeolocation_schema::cleanup() {
    if(token != nullptr) { 
        delete token;
    }
    if(id != nullptr) { 
        delete id;
    }
    if(radio != nullptr) { 
        delete radio;
    }


    if(cells != nullptr) { 
        auto arr = cells;
        for(auto o: *arr) { 
            delete o;
        }
        delete cells;
    }
    if(wifi != nullptr) { 
        auto arr = wifi;
        for(auto o: *arr) { 
            delete o;
        }
        delete wifi;
    }
    if(fallbacks != nullptr) { 
        delete fallbacks;
    }
    if(address != nullptr) { 
        delete address;
    }
    if(ip != nullptr) { 
        delete ip;
    }
    if(bt != nullptr) { 
        delete bt;
    }
}

OAIGeolocation_schema*
OAIGeolocation_schema::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIGeolocation_schema::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&token, pJson["token"], "QString", "QString");
    
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&radio, pJson["radio"], "OAIRadio_schema", "OAIRadio_schema");
    
    ::OpenAPI::setValue(&mcc, pJson["mcc"], "qint64", "");
    
    ::OpenAPI::setValue(&mnc, pJson["mnc"], "qint64", "");
    
    
    ::OpenAPI::setValue(&cells, pJson["cells"], "QList", "OAICell_schema");
    
    ::OpenAPI::setValue(&wifi, pJson["wifi"], "QList", "OAIWifi_schema");
    ::OpenAPI::setValue(&fallbacks, pJson["fallbacks"], "OAIFallback_schema", "OAIFallback_schema");
    
    ::OpenAPI::setValue(&address, pJson["address"], "OAIGeolocation_address_schema", "OAIGeolocation_address_schema");
    
    ::OpenAPI::setValue(&ip, pJson["ip"], "QString", "QString");
    
    ::OpenAPI::setValue(&bt, pJson["bt"], "OAIBt_schema", "OAIBt_schema");
    
}

QString
OAIGeolocation_schema::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIGeolocation_schema::asJsonObject() {
    QJsonObject obj;
    if(token != nullptr && *token != QString("")){
        toJsonValue(QString("token"), token, obj, QString("QString"));
    }
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if((radio != nullptr) && (radio->isSet())){
        toJsonValue(QString("radio"), radio, obj, QString("OAIRadio_schema"));
    }
    if(m_mcc_isSet){
        obj.insert("mcc", QJsonValue(mcc));
    }
    if(m_mnc_isSet){
        obj.insert("mnc", QJsonValue(mnc));
    }
    if(cells->size() > 0){
        toJsonArray((QList<void*>*)cells, obj, "cells", "OAICell_schema");
    }
    if(wifi->size() > 0){
        toJsonArray((QList<void*>*)wifi, obj, "wifi", "OAIWifi_schema");
    }
    if((fallbacks != nullptr) && (fallbacks->isSet())){
        toJsonValue(QString("fallbacks"), fallbacks, obj, QString("OAIFallback_schema"));
    }
    if((address != nullptr) && (address->isSet())){
        toJsonValue(QString("address"), address, obj, QString("OAIGeolocation_address_schema"));
    }
    if(ip != nullptr && *ip != QString("")){
        toJsonValue(QString("ip"), ip, obj, QString("QString"));
    }
    if((bt != nullptr) && (bt->isSet())){
        toJsonValue(QString("bt"), bt, obj, QString("OAIBt_schema"));
    }

    return obj;
}

QString*
OAIGeolocation_schema::getToken() {
    return token;
}
void
OAIGeolocation_schema::setToken(QString* token) {
    this->token = token;
    this->m_token_isSet = true;
}

QString*
OAIGeolocation_schema::getId() {
    return id;
}
void
OAIGeolocation_schema::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

OAIRadio_schema*
OAIGeolocation_schema::getRadio() {
    return radio;
}
void
OAIGeolocation_schema::setRadio(OAIRadio_schema* radio) {
    this->radio = radio;
    this->m_radio_isSet = true;
}

qint64
OAIGeolocation_schema::getMcc() {
    return mcc;
}
void
OAIGeolocation_schema::setMcc(qint64 mcc) {
    this->mcc = mcc;
    this->m_mcc_isSet = true;
}

qint64
OAIGeolocation_schema::getMnc() {
    return mnc;
}
void
OAIGeolocation_schema::setMnc(qint64 mnc) {
    this->mnc = mnc;
    this->m_mnc_isSet = true;
}

QList<OAICell_schema*>*
OAIGeolocation_schema::getCells() {
    return cells;
}
void
OAIGeolocation_schema::setCells(QList<OAICell_schema*>* cells) {
    this->cells = cells;
    this->m_cells_isSet = true;
}

QList<OAIWifi_schema*>*
OAIGeolocation_schema::getWifi() {
    return wifi;
}
void
OAIGeolocation_schema::setWifi(QList<OAIWifi_schema*>* wifi) {
    this->wifi = wifi;
    this->m_wifi_isSet = true;
}

OAIFallback_schema*
OAIGeolocation_schema::getFallbacks() {
    return fallbacks;
}
void
OAIGeolocation_schema::setFallbacks(OAIFallback_schema* fallbacks) {
    this->fallbacks = fallbacks;
    this->m_fallbacks_isSet = true;
}

OAIGeolocation_address_schema*
OAIGeolocation_schema::getAddress() {
    return address;
}
void
OAIGeolocation_schema::setAddress(OAIGeolocation_address_schema* address) {
    this->address = address;
    this->m_address_isSet = true;
}

QString*
OAIGeolocation_schema::getIp() {
    return ip;
}
void
OAIGeolocation_schema::setIp(QString* ip) {
    this->ip = ip;
    this->m_ip_isSet = true;
}

OAIBt_schema*
OAIGeolocation_schema::getBt() {
    return bt;
}
void
OAIGeolocation_schema::setBt(OAIBt_schema* bt) {
    this->bt = bt;
    this->m_bt_isSet = true;
}


bool
OAIGeolocation_schema::isSet(){
    bool isObjectUpdated = false;
    do{
        if(token != nullptr && *token != QString("")){ isObjectUpdated = true; break;}
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(radio != nullptr && radio->isSet()){ isObjectUpdated = true; break;}
        if(m_mcc_isSet){ isObjectUpdated = true; break;}
        if(m_mnc_isSet){ isObjectUpdated = true; break;}
        if(cells->size() > 0){ isObjectUpdated = true; break;}
        if(wifi->size() > 0){ isObjectUpdated = true; break;}
        if(fallbacks != nullptr && fallbacks->isSet()){ isObjectUpdated = true; break;}
        if(address != nullptr && address->isSet()){ isObjectUpdated = true; break;}
        if(ip != nullptr && *ip != QString("")){ isObjectUpdated = true; break;}
        if(bt != nullptr && bt->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

