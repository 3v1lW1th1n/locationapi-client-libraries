<?php
/**
 * GeolocationSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  unwired
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace unwired\Model;

use \ArrayAccess;
use \unwired\ObjectSerializer;

/**
 * GeolocationSchema Class Doc Comment
 *
 * @category Class
 * @package  unwired
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GeolocationSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'geolocation_schema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'token' => 'string',
        'id' => 'string',
        'radio' => '\unwired\Model\RadioSchema',
        'mcc' => 'int',
        'mnc' => 'int',
        'cells' => '\unwired\Model\CellSchema[]',
        'wifi' => '\unwired\Model\WifiSchema[]',
        'fallbacks' => '\unwired\Model\FallbackSchema',
        'address' => '\unwired\Model\GeolocationAddressSchema',
        'ip' => 'string',
        'bt' => '\unwired\Model\BtSchema'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'token' => null,
        'id' => null,
        'radio' => null,
        'mcc' => 'int64',
        'mnc' => 'int64',
        'cells' => null,
        'wifi' => null,
        'fallbacks' => null,
        'address' => null,
        'ip' => null,
        'bt' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'token' => 'token',
        'id' => 'id',
        'radio' => 'radio',
        'mcc' => 'mcc',
        'mnc' => 'mnc',
        'cells' => 'cells',
        'wifi' => 'wifi',
        'fallbacks' => 'fallbacks',
        'address' => 'address',
        'ip' => 'ip',
        'bt' => 'bt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'token' => 'setToken',
        'id' => 'setId',
        'radio' => 'setRadio',
        'mcc' => 'setMcc',
        'mnc' => 'setMnc',
        'cells' => 'setCells',
        'wifi' => 'setWifi',
        'fallbacks' => 'setFallbacks',
        'address' => 'setAddress',
        'ip' => 'setIp',
        'bt' => 'setBt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'token' => 'getToken',
        'id' => 'getId',
        'radio' => 'getRadio',
        'mcc' => 'getMcc',
        'mnc' => 'getMnc',
        'cells' => 'getCells',
        'wifi' => 'getWifi',
        'fallbacks' => 'getFallbacks',
        'address' => 'getAddress',
        'ip' => 'getIp',
        'bt' => 'getBt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['token'] = isset($data['token']) ? $data['token'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['radio'] = isset($data['radio']) ? $data['radio'] : null;
        $this->container['mcc'] = isset($data['mcc']) ? $data['mcc'] : null;
        $this->container['mnc'] = isset($data['mnc']) ? $data['mnc'] : null;
        $this->container['cells'] = isset($data['cells']) ? $data['cells'] : null;
        $this->container['wifi'] = isset($data['wifi']) ? $data['wifi'] : null;
        $this->container['fallbacks'] = isset($data['fallbacks']) ? $data['fallbacks'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['bt'] = isset($data['bt']) ? $data['bt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return $this
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID of the device, in case you are in a per-device plan. This could be any unique string such as an IMEI, IMSI, phone number or a hash of any of the previous values, etc. Maximum accepted length is 20 chars, and values should only be alphanumeric (a-z, 0-9)
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets radio
     *
     * @return \unwired\Model\RadioSchema|null
     */
    public function getRadio()
    {
        return $this->container['radio'];
    }

    /**
     * Sets radio
     *
     * @param \unwired\Model\RadioSchema|null $radio radio
     *
     * @return $this
     */
    public function setRadio($radio)
    {
        $this->container['radio'] = $radio;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return int|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param int|null $mcc \"Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\"
     *
     * @return $this
     */
    public function setMcc($mcc)
    {
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets mnc
     *
     * @return int|null
     */
    public function getMnc()
    {
        return $this->container['mnc'];
    }

    /**
     * Sets mnc
     *
     * @param int|null $mnc Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.
     *
     * @return $this
     */
    public function setMnc($mnc)
    {
        $this->container['mnc'] = $mnc;

        return $this;
    }

    /**
     * Gets cells
     *
     * @return \unwired\Model\CellSchema[]|null
     */
    public function getCells()
    {
        return $this->container['cells'];
    }

    /**
     * Sets cells
     *
     * @param \unwired\Model\CellSchema[]|null $cells An array of cell ID objects
     *
     * @return $this
     */
    public function setCells($cells)
    {
        $this->container['cells'] = $cells;

        return $this;
    }

    /**
     * Gets wifi
     *
     * @return \unwired\Model\WifiSchema[]|null
     */
    public function getWifi()
    {
        return $this->container['wifi'];
    }

    /**
     * Sets wifi
     *
     * @param \unwired\Model\WifiSchema[]|null $wifi An array of WiFi objects visible to the device.
     *
     * @return $this
     */
    public function setWifi($wifi)
    {
        $this->container['wifi'] = $wifi;

        return $this;
    }

    /**
     * Gets fallbacks
     *
     * @return \unwired\Model\FallbackSchema|null
     */
    public function getFallbacks()
    {
        return $this->container['fallbacks'];
    }

    /**
     * Sets fallbacks
     *
     * @param \unwired\Model\FallbackSchema|null $fallbacks fallbacks
     *
     * @return $this
     */
    public function setFallbacks($fallbacks)
    {
        $this->container['fallbacks'] = $fallbacks;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \unwired\Model\GeolocationAddressSchema|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \unwired\Model\GeolocationAddressSchema|null $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip IP address of device.
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets bt
     *
     * @return \unwired\Model\BtSchema|null
     */
    public function getBt()
    {
        return $this->container['bt'];
    }

    /**
     * Sets bt
     *
     * @param \unwired\Model\BtSchema|null $bt bt
     *
     * @return $this
     */
    public function setBt($bt)
    {
        $this->container['bt'] = $bt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


