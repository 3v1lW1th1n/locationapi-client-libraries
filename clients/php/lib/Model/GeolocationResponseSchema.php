<?php
/**
 * GeolocationResponseSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  unwired
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace unwired\Model;

use \ArrayAccess;
use \unwired\ObjectSerializer;

/**
 * GeolocationResponseSchema Class Doc Comment
 *
 * @category Class
 * @description The response will be a JSON object.
 * @package  unwired
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GeolocationResponseSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'geolocation_response_schema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'message' => 'string',
        'balance' => 'int',
        'balance_slots' => 'int',
        'lat' => 'double',
        'lon' => 'double',
        'accuracy' => 'int',
        'address' => 'string',
        'address_details' => '\unwired\Model\AddressDetailsSchema',
        'aged' => 'int',
        'fallback' => '\unwired\Model\FallbackSchema'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'status' => null,
        'message' => null,
        'balance' => 'int64',
        'balance_slots' => 'int64',
        'lat' => 'double',
        'lon' => 'double',
        'accuracy' => 'int64',
        'address' => null,
        'address_details' => null,
        'aged' => 'int32',
        'fallback' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'message' => 'message',
        'balance' => 'balance',
        'balance_slots' => 'balance_slots',
        'lat' => 'lat',
        'lon' => 'lon',
        'accuracy' => 'accuracy',
        'address' => 'address',
        'address_details' => 'address_details',
        'aged' => 'aged',
        'fallback' => 'fallback'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'message' => 'setMessage',
        'balance' => 'setBalance',
        'balance_slots' => 'setBalanceSlots',
        'lat' => 'setLat',
        'lon' => 'setLon',
        'accuracy' => 'setAccuracy',
        'address' => 'setAddress',
        'address_details' => 'setAddressDetails',
        'aged' => 'setAged',
        'fallback' => 'setFallback'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'message' => 'getMessage',
        'balance' => 'getBalance',
        'balance_slots' => 'getBalanceSlots',
        'lat' => 'getLat',
        'lon' => 'getLon',
        'accuracy' => 'getAccuracy',
        'address' => 'getAddress',
        'address_details' => 'getAddressDetails',
        'aged' => 'getAged',
        'fallback' => 'getFallback'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['balance_slots'] = isset($data['balance_slots']) ? $data['balance_slots'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['lon'] = isset($data['lon']) ? $data['lon'] : null;
        $this->container['accuracy'] = isset($data['accuracy']) ? $data['accuracy'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['address_details'] = isset($data['address_details']) ? $data['address_details'] : null;
        $this->container['aged'] = isset($data['aged']) ? $data['aged'] : null;
        $this->container['fallback'] = isset($data['fallback']) ? $data['fallback'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status If the request is successful, ok is returned. Otherwise error is returned
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Any additional information from the server is returned here
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int|null $balance This represents the remaining balance on the API token. Requests that return error are not charged and do not affect balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets balance_slots
     *
     * @return int|null
     */
    public function getBalanceSlots()
    {
        return $this->container['balance_slots'];
    }

    /**
     * Sets balance_slots
     *
     * @param int|null $balance_slots This represents the remaining balance of device slots. Requests that return error are not charged and do not affect balance. If -1 is returned, then observe it as an error while calculating slots balance. This element will only exist if you are on a device plan.
     *
     * @return $this
     */
    public function setBalanceSlots($balance_slots)
    {
        $this->container['balance_slots'] = $balance_slots;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return double|null
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param double|null $lat The latitude representing the location
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return double|null
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param double|null $lon The longitude representing the location
     *
     * @return $this
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets accuracy
     *
     * @return int|null
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param int|null $accuracy The accuracy of the position is returned in meters
     *
     * @return $this
     */
    public function setAccuracy($accuracy)
    {
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address The physical address of the location
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_details
     *
     * @return \unwired\Model\AddressDetailsSchema|null
     */
    public function getAddressDetails()
    {
        return $this->container['address_details'];
    }

    /**
     * Sets address_details
     *
     * @param \unwired\Model\AddressDetailsSchema|null $address_details address_details
     *
     * @return $this
     */
    public function setAddressDetails($address_details)
    {
        $this->container['address_details'] = $address_details;

        return $this;
    }

    /**
     * Gets aged
     *
     * @return int|null
     */
    public function getAged()
    {
        return $this->container['aged'];
    }

    /**
     * Sets aged
     *
     * @param int|null $aged Shown when the location is based on a single measurement or those older than 90 days or is an LAC fallback
     *
     * @return $this
     */
    public function setAged($aged)
    {
        $this->container['aged'] = $aged;

        return $this;
    }

    /**
     * Gets fallback
     *
     * @return \unwired\Model\FallbackSchema|null
     */
    public function getFallback()
    {
        return $this->container['fallback'];
    }

    /**
     * Sets fallback
     *
     * @param \unwired\Model\FallbackSchema|null $fallback fallback
     *
     * @return $this
     */
    public function setFallback($fallback)
    {
        $this->container['fallback'] = $fallback;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


