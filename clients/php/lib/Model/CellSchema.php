<?php
/**
 * CellSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  unwired
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace unwired\Model;

use \ArrayAccess;
use \unwired\ObjectSerializer;

/**
 * CellSchema Class Doc Comment
 *
 * @category Class
 * @description You can send 1 to 7 cell ID objects. If your device supports scanning for more than 7 cell objects, reach out to us and we’ll increase this limit on your account. The first cell object has to be that of the serving cell, i.e. the tower the device is connected to. The others are neighbouring cell objects that are visible to the device. Except lac and cid all other parameters mentioned below are optional. Parameters vary depending on the radio type. Supported radio types and their corresponding parameters are
 * @package  unwired
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CellSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cell_schema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lac' => 'int',
        'cid' => 'int',
        'radio' => '\unwired\Model\RadioSchema',
        'mcc' => 'int',
        'mnc' => 'int',
        'signal' => 'int',
        'psc' => 'int',
        'asu' => 'int',
        'ta' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'lac' => 'int64',
        'cid' => 'int64',
        'radio' => null,
        'mcc' => 'int64',
        'mnc' => 'int64',
        'signal' => 'int64',
        'psc' => 'int64',
        'asu' => 'int64',
        'ta' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lac' => 'lac',
        'cid' => 'cid',
        'radio' => 'radio',
        'mcc' => 'mcc',
        'mnc' => 'mnc',
        'signal' => 'signal',
        'psc' => 'psc',
        'asu' => 'asu',
        'ta' => 'ta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lac' => 'setLac',
        'cid' => 'setCid',
        'radio' => 'setRadio',
        'mcc' => 'setMcc',
        'mnc' => 'setMnc',
        'signal' => 'setSignal',
        'psc' => 'setPsc',
        'asu' => 'setAsu',
        'ta' => 'setTa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lac' => 'getLac',
        'cid' => 'getCid',
        'radio' => 'getRadio',
        'mcc' => 'getMcc',
        'mnc' => 'getMnc',
        'signal' => 'getSignal',
        'psc' => 'getPsc',
        'asu' => 'getAsu',
        'ta' => 'getTa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lac'] = isset($data['lac']) ? $data['lac'] : null;
        $this->container['cid'] = isset($data['cid']) ? $data['cid'] : null;
        $this->container['radio'] = isset($data['radio']) ? $data['radio'] : null;
        $this->container['mcc'] = isset($data['mcc']) ? $data['mcc'] : null;
        $this->container['mnc'] = isset($data['mnc']) ? $data['mnc'] : null;
        $this->container['signal'] = isset($data['signal']) ? $data['signal'] : null;
        $this->container['psc'] = isset($data['psc']) ? $data['psc'] : null;
        $this->container['asu'] = isset($data['asu']) ? $data['asu'] : null;
        $this->container['ta'] = isset($data['ta']) ? $data['ta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['lac']) && ($this->container['lac'] > 65533)) {
            $invalidProperties[] = "invalid value for 'lac', must be smaller than or equal to 65533.";
        }

        if (!is_null($this->container['lac']) && ($this->container['lac'] < 1)) {
            $invalidProperties[] = "invalid value for 'lac', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cid']) && ($this->container['cid'] > 268435455)) {
            $invalidProperties[] = "invalid value for 'cid', must be smaller than or equal to 268435455.";
        }

        if (!is_null($this->container['cid']) && ($this->container['cid'] < 0)) {
            $invalidProperties[] = "invalid value for 'cid', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['signal']) && ($this->container['signal'] > -25)) {
            $invalidProperties[] = "invalid value for 'signal', must be smaller than or equal to -25.";
        }

        if (!is_null($this->container['signal']) && ($this->container['signal'] < -121)) {
            $invalidProperties[] = "invalid value for 'signal', must be bigger than or equal to -121.";
        }

        if (!is_null($this->container['psc']) && ($this->container['psc'] > 503)) {
            $invalidProperties[] = "invalid value for 'psc', must be smaller than or equal to 503.";
        }

        if (!is_null($this->container['psc']) && ($this->container['psc'] < 0)) {
            $invalidProperties[] = "invalid value for 'psc', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['asu']) && ($this->container['asu'] > 97)) {
            $invalidProperties[] = "invalid value for 'asu', must be smaller than or equal to 97.";
        }

        if (!is_null($this->container['asu']) && ($this->container['asu'] < -5)) {
            $invalidProperties[] = "invalid value for 'asu', must be bigger than or equal to -5.";
        }

        if (!is_null($this->container['ta']) && ($this->container['ta'] > 63)) {
            $invalidProperties[] = "invalid value for 'ta', must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['ta']) && ($this->container['ta'] < 0)) {
            $invalidProperties[] = "invalid value for 'ta', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lac
     *
     * @return int|null
     */
    public function getLac()
    {
        return $this->container['lac'];
    }

    /**
     * Sets lac
     *
     * @param int|null $lac the Location Area Code of your operator’s network.
     *
     * @return $this
     */
    public function setLac($lac)
    {

        if (!is_null($lac) && ($lac > 65533)) {
            throw new \InvalidArgumentException('invalid value for $lac when calling CellSchema., must be smaller than or equal to 65533.');
        }
        if (!is_null($lac) && ($lac < 1)) {
            throw new \InvalidArgumentException('invalid value for $lac when calling CellSchema., must be bigger than or equal to 1.');
        }

        $this->container['lac'] = $lac;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return int|null
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param int|null $cid Cell ID
     *
     * @return $this
     */
    public function setCid($cid)
    {

        if (!is_null($cid) && ($cid > 268435455)) {
            throw new \InvalidArgumentException('invalid value for $cid when calling CellSchema., must be smaller than or equal to 268435455.');
        }
        if (!is_null($cid) && ($cid < 0)) {
            throw new \InvalidArgumentException('invalid value for $cid when calling CellSchema., must be bigger than or equal to 0.');
        }

        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets radio
     *
     * @return \unwired\Model\RadioSchema|null
     */
    public function getRadio()
    {
        return $this->container['radio'];
    }

    /**
     * Sets radio
     *
     * @param \unwired\Model\RadioSchema|null $radio radio
     *
     * @return $this
     */
    public function setRadio($radio)
    {
        $this->container['radio'] = $radio;

        return $this;
    }

    /**
     * Gets mcc
     *
     * @return int|null
     */
    public function getMcc()
    {
        return $this->container['mcc'];
    }

    /**
     * Sets mcc
     *
     * @param int|null $mcc \"Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\"
     *
     * @return $this
     */
    public function setMcc($mcc)
    {
        $this->container['mcc'] = $mcc;

        return $this;
    }

    /**
     * Gets mnc
     *
     * @return int|null
     */
    public function getMnc()
    {
        return $this->container['mnc'];
    }

    /**
     * Sets mnc
     *
     * @param int|null $mnc Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.
     *
     * @return $this
     */
    public function setMnc($mnc)
    {
        $this->container['mnc'] = $mnc;

        return $this;
    }

    /**
     * Gets signal
     *
     * @return int|null
     */
    public function getSignal()
    {
        return $this->container['signal'];
    }

    /**
     * Sets signal
     *
     * @param int|null $signal Signal Strength (RSSI)
     *
     * @return $this
     */
    public function setSignal($signal)
    {

        if (!is_null($signal) && ($signal > -25)) {
            throw new \InvalidArgumentException('invalid value for $signal when calling CellSchema., must be smaller than or equal to -25.');
        }
        if (!is_null($signal) && ($signal < -121)) {
            throw new \InvalidArgumentException('invalid value for $signal when calling CellSchema., must be bigger than or equal to -121.');
        }

        $this->container['signal'] = $signal;

        return $this;
    }

    /**
     * Gets psc
     *
     * @return int|null
     */
    public function getPsc()
    {
        return $this->container['psc'];
    }

    /**
     * Sets psc
     *
     * @param int|null $psc Primary Scrambling Code
     *
     * @return $this
     */
    public function setPsc($psc)
    {

        if (!is_null($psc) && ($psc > 503)) {
            throw new \InvalidArgumentException('invalid value for $psc when calling CellSchema., must be smaller than or equal to 503.');
        }
        if (!is_null($psc) && ($psc < 0)) {
            throw new \InvalidArgumentException('invalid value for $psc when calling CellSchema., must be bigger than or equal to 0.');
        }

        $this->container['psc'] = $psc;

        return $this;
    }

    /**
     * Gets asu
     *
     * @return int|null
     */
    public function getAsu()
    {
        return $this->container['asu'];
    }

    /**
     * Sets asu
     *
     * @param int|null $asu Arbitrary Strength Unit
     *
     * @return $this
     */
    public function setAsu($asu)
    {

        if (!is_null($asu) && ($asu > 97)) {
            throw new \InvalidArgumentException('invalid value for $asu when calling CellSchema., must be smaller than or equal to 97.');
        }
        if (!is_null($asu) && ($asu < -5)) {
            throw new \InvalidArgumentException('invalid value for $asu when calling CellSchema., must be bigger than or equal to -5.');
        }

        $this->container['asu'] = $asu;

        return $this;
    }

    /**
     * Gets ta
     *
     * @return int|null
     */
    public function getTa()
    {
        return $this->container['ta'];
    }

    /**
     * Sets ta
     *
     * @param int|null $ta Timing Advance
     *
     * @return $this
     */
    public function setTa($ta)
    {

        if (!is_null($ta) && ($ta > 63)) {
            throw new \InvalidArgumentException('invalid value for $ta when calling CellSchema., must be smaller than or equal to 63.');
        }
        if (!is_null($ta) && ($ta < 0)) {
            throw new \InvalidArgumentException('invalid value for $ta when calling CellSchema., must be bigger than or equal to 0.');
        }

        $this->container['ta'] = $ta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


