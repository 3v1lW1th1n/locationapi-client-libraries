<?php
/**
 * WifiSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  unwired
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace unwired\Model;

use \ArrayAccess;
use \unwired\ObjectSerializer;

/**
 * WifiSchema Class Doc Comment
 *
 * @category Class
 * @description You can send a minimum of 2 and a maximum of 15 WiFi objects in 1 request. If WiFi is not available, wifi object can be omitted all together. In accordance with our industryâ€™s privacy standards we require a minimum of 2 valid nearby Access Points to be sent. If your use-case allows only 1 AP, reach out to us.
 * @package  unwired
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WifiSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'wifi_schema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bssid' => 'string',
        'channel' => 'int',
        'frequency' => 'int',
        'signal' => 'int',
        'signal_to_noise_ratio' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'bssid' => null,
        'channel' => 'int64',
        'frequency' => 'int64',
        'signal' => 'int64',
        'signal_to_noise_ratio' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bssid' => 'bssid',
        'channel' => 'channel',
        'frequency' => 'frequency',
        'signal' => 'signal',
        'signal_to_noise_ratio' => 'signalToNoiseRatio'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bssid' => 'setBssid',
        'channel' => 'setChannel',
        'frequency' => 'setFrequency',
        'signal' => 'setSignal',
        'signal_to_noise_ratio' => 'setSignalToNoiseRatio'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bssid' => 'getBssid',
        'channel' => 'getChannel',
        'frequency' => 'getFrequency',
        'signal' => 'getSignal',
        'signal_to_noise_ratio' => 'getSignalToNoiseRatio'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bssid'] = isset($data['bssid']) ? $data['bssid'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['signal'] = isset($data['signal']) ? $data['signal'] : null;
        $this->container['signal_to_noise_ratio'] = isset($data['signal_to_noise_ratio']) ? $data['signal_to_noise_ratio'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['signal']) && ($this->container['signal'] > -25)) {
            $invalidProperties[] = "invalid value for 'signal', must be smaller than or equal to -25.";
        }

        if (!is_null($this->container['signal']) && ($this->container['signal'] < -121)) {
            $invalidProperties[] = "invalid value for 'signal', must be bigger than or equal to -121.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bssid
     *
     * @return string|null
     */
    public function getBssid()
    {
        return $this->container['bssid'];
    }

    /**
     * Sets bssid
     *
     * @param string|null $bssid Basic Service Set Identifier or MAC address of the Access Point. Typical format of a MAC address is xx-xx-xx-xx-xx-xx. However, the delimiter can be any of these when sent to the API: : or - or .
     *
     * @return $this
     */
    public function setBssid($bssid)
    {
        $this->container['bssid'] = $bssid;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return int|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param int|null $channel Channel the WiFi network is operating in (optional)
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return int|null
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int|null $frequency Frequency the WiFi network is operating in (MHz) (optional)
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets signal
     *
     * @return int|null
     */
    public function getSignal()
    {
        return $this->container['signal'];
    }

    /**
     * Sets signal
     *
     * @param int|null $signal Signal Strength (RSSI)
     *
     * @return $this
     */
    public function setSignal($signal)
    {

        if (!is_null($signal) && ($signal > -25)) {
            throw new \InvalidArgumentException('invalid value for $signal when calling WifiSchema., must be smaller than or equal to -25.');
        }
        if (!is_null($signal) && ($signal < -121)) {
            throw new \InvalidArgumentException('invalid value for $signal when calling WifiSchema., must be bigger than or equal to -121.');
        }

        $this->container['signal'] = $signal;

        return $this;
    }

    /**
     * Gets signal_to_noise_ratio
     *
     * @return int|null
     */
    public function getSignalToNoiseRatio()
    {
        return $this->container['signal_to_noise_ratio'];
    }

    /**
     * Sets signal_to_noise_ratio
     *
     * @param int|null $signal_to_noise_ratio The current signal to noise ratio, measured in dB (optional)
     *
     * @return $this
     */
    public function setSignalToNoiseRatio($signal_to_noise_ratio)
    {
        $this->container['signal_to_noise_ratio'] = $signal_to_noise_ratio;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


