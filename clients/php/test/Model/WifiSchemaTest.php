<?php
/**
 * WifiSchemaTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  unwired
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace unwired;

/**
 * WifiSchemaTest Class Doc Comment
 *
 * @category    Class
 * @description You can send a minimum of 2 and a maximum of 15 WiFi objects in 1 request. If WiFi is not available, wifi object can be omitted all together. In accordance with our industry’s privacy standards we require a minimum of 2 valid nearby Access Points to be sent. If your use-case allows only 1 AP, reach out to us.
 * @package     unwired
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class WifiSchemaTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "WifiSchema"
     */
    public function testWifiSchema()
    {
    }

    /**
     * Test attribute "bssid"
     */
    public function testPropertyBssid()
    {
    }

    /**
     * Test attribute "channel"
     */
    public function testPropertyChannel()
    {
    }

    /**
     * Test attribute "frequency"
     */
    public function testPropertyFrequency()
    {
    }

    /**
     * Test attribute "signal"
     */
    public function testPropertySignal()
    {
    }

    /**
     * Test attribute "signal_to_noise_ratio"
     */
    public function testPropertySignalToNoiseRatio()
    {
    }
}
