/**
* Location API
* Geolocation, Geocoding and Maps
*
* OpenAPI spec version: 2.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package unwired.apis


import unwired.infrastructure.*

class REVERSEApi(basePath: kotlin.String = "https://us1.unwiredlabs.com/v2") : ApiClient(basePath) {

    /**
    * Reverse Geocoding
    * Reverse geocoding is the process of converting a coordinate or location (latitude, longitude) to a readable address or place name. This permits the identification of nearby street addresses, places, and/or area subdivisions such as a neighborhood, county, state, or country.
    * @param lat Latitude of the location to generate an address for. 
    * @param lon Longitude of the location to generate an address for. 
    * @param zoom Zoom value lies between 0-18. Level of detail required where 0 is country and 18 is house/building (optional, default to null)
    * @param acceptLanguage Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional, default to null)
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun reverse(lat: kotlin.Double, lon: kotlin.Double, zoom: kotlin.Long, acceptLanguage: kotlin.String) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("lat" to listOf("$lat"), "lon" to listOf("$lon"), "zoom" to listOf("$zoom"), "accept-language" to listOf("$acceptLanguage"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/reverse.php",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
