/**
* Location API
* Geolocation, Geocoding and Maps
*
* OpenAPI spec version: 2.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package unwired.apis


import unwired.infrastructure.*

class TimezoneApi(basePath: kotlin.String = "https://us1.unwiredlabs.com/v2") : ApiClient(basePath) {

    /**
    * timezone
    * The Unwired Labs TimeZone API provides time offset data for locations on the surface of the earth.
    * @param lat lattitude of the location 
    * @param lon longitude of location 
    * @return kotlin.Any
    */
    @Suppress("UNCHECKED_CAST")
    fun timezone(lat: kotlin.Double, lon: kotlin.Double) : kotlin.Any {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("lat" to listOf("$lat"), "lon" to listOf("$lon"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/timezone.php",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<kotlin.Any>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Any
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
