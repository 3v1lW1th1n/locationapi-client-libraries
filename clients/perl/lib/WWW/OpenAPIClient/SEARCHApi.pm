=begin comment

Location API

Geolocation, Geocoding and Maps

OpenAPI spec version: 2.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::SEARCHApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# search
#
# Forward Geocoding
# 
# @param string $q Address to geocode (required)
# @param string $viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box.  (optional)
# @param int $limit Limit the number of returned results. Default is 10. (optional, default to 10)
# @param string $accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native (optional)
# @param string $countrycodes Limit search to a list of countries. (optional)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Address to geocode',
        required => '1',
    },
    'viewbox' => {
        data_type => 'string',
        description => 'The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box. ',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'Limit the number of returned results. Default is 10.',
        required => '0',
    },
    'accept_language' => {
        data_type => 'string',
        description => 'Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native',
        required => '0',
    },
    'countrycodes' => {
        data_type => 'string',
        description => 'Limit search to a list of countries.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search' } = { 
    	summary => 'Forward Geocoding',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub search {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling search");
    }

    # parse inputs
    my $_resource_path = '/search.php';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'viewbox'}) {
        $query_params->{'viewbox'} = $self->{api_client}->to_query_value($args{'viewbox'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'accept_language'}) {
        $query_params->{'accept-language'} = $self->{api_client}->to_query_value($args{'accept_language'});
    }

    # query params
    if ( exists $args{'countrycodes'}) {
        $query_params->{'countrycodes'} = $self->{api_client}->to_query_value($args{'countrycodes'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(token )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

1;
