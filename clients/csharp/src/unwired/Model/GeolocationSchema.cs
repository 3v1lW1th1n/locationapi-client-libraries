/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = unwired.Client.OpenAPIDateConverter;

namespace unwired.Model
{
    /// <summary>
    /// GeolocationSchema
    /// </summary>
    [DataContract]
    public partial class GeolocationSchema :  IEquatable<GeolocationSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeolocationSchema" /> class.
        /// </summary>
        /// <param name="token">token.</param>
        /// <param name="id">ID of the device, in case you are in a per-device plan. This could be any unique string such as an IMEI, IMSI, phone number or a hash of any of the previous values, etc. Maximum accepted length is 20 chars, and values should only be alphanumeric (a-z, 0-9).</param>
        /// <param name="radio">radio.</param>
        /// <param name="mcc">\&quot;Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\&quot;.</param>
        /// <param name="mnc">Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767..</param>
        /// <param name="cells">An array of cell ID objects.</param>
        /// <param name="wifi">An array of WiFi objects visible to the device..</param>
        /// <param name="fallbacks">fallbacks.</param>
        /// <param name="address">address.</param>
        /// <param name="ip">IP address of device..</param>
        /// <param name="bt">bt.</param>
        public GeolocationSchema(string token = default(string), string id = default(string), RadioSchema radio = default(RadioSchema), long? mcc = default(long?), long? mnc = default(long?), List<CellSchema> cells = default(List<CellSchema>), List<WifiSchema> wifi = default(List<WifiSchema>), FallbackSchema fallbacks = default(FallbackSchema), GeolocationAddressSchema address = default(GeolocationAddressSchema), string ip = default(string), BtSchema bt = default(BtSchema))
        {
            this.Token = token;
            this.Id = id;
            this.Radio = radio;
            this.Mcc = mcc;
            this.Mnc = mnc;
            this.Cells = cells;
            this.Wifi = wifi;
            this.Fallbacks = fallbacks;
            this.Address = address;
            this.Ip = ip;
            this.Bt = bt;
        }
        
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// ID of the device, in case you are in a per-device plan. This could be any unique string such as an IMEI, IMSI, phone number or a hash of any of the previous values, etc. Maximum accepted length is 20 chars, and values should only be alphanumeric (a-z, 0-9)
        /// </summary>
        /// <value>ID of the device, in case you are in a per-device plan. This could be any unique string such as an IMEI, IMSI, phone number or a hash of any of the previous values, etc. Maximum accepted length is 20 chars, and values should only be alphanumeric (a-z, 0-9)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Radio
        /// </summary>
        [DataMember(Name="radio", EmitDefaultValue=false)]
        public RadioSchema Radio { get; set; }

        /// <summary>
        /// \&quot;Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\&quot;
        /// </summary>
        /// <value>\&quot;Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\&quot;</value>
        [DataMember(Name="mcc", EmitDefaultValue=false)]
        public long? Mcc { get; set; }

        /// <summary>
        /// Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.
        /// </summary>
        /// <value>Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.</value>
        [DataMember(Name="mnc", EmitDefaultValue=false)]
        public long? Mnc { get; set; }

        /// <summary>
        /// An array of cell ID objects
        /// </summary>
        /// <value>An array of cell ID objects</value>
        [DataMember(Name="cells", EmitDefaultValue=false)]
        public List<CellSchema> Cells { get; set; }

        /// <summary>
        /// An array of WiFi objects visible to the device.
        /// </summary>
        /// <value>An array of WiFi objects visible to the device.</value>
        [DataMember(Name="wifi", EmitDefaultValue=false)]
        public List<WifiSchema> Wifi { get; set; }

        /// <summary>
        /// Gets or Sets Fallbacks
        /// </summary>
        [DataMember(Name="fallbacks", EmitDefaultValue=false)]
        public FallbackSchema Fallbacks { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public GeolocationAddressSchema Address { get; set; }

        /// <summary>
        /// IP address of device.
        /// </summary>
        /// <value>IP address of device.</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// Gets or Sets Bt
        /// </summary>
        [DataMember(Name="bt", EmitDefaultValue=false)]
        public BtSchema Bt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeolocationSchema {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Radio: ").Append(Radio).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  Mnc: ").Append(Mnc).Append("\n");
            sb.Append("  Cells: ").Append(Cells).Append("\n");
            sb.Append("  Wifi: ").Append(Wifi).Append("\n");
            sb.Append("  Fallbacks: ").Append(Fallbacks).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Bt: ").Append(Bt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeolocationSchema);
        }

        /// <summary>
        /// Returns true if GeolocationSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of GeolocationSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeolocationSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Radio == input.Radio ||
                    (this.Radio != null &&
                    this.Radio.Equals(input.Radio))
                ) && 
                (
                    this.Mcc == input.Mcc ||
                    (this.Mcc != null &&
                    this.Mcc.Equals(input.Mcc))
                ) && 
                (
                    this.Mnc == input.Mnc ||
                    (this.Mnc != null &&
                    this.Mnc.Equals(input.Mnc))
                ) && 
                (
                    this.Cells == input.Cells ||
                    this.Cells != null &&
                    this.Cells.SequenceEqual(input.Cells)
                ) && 
                (
                    this.Wifi == input.Wifi ||
                    this.Wifi != null &&
                    this.Wifi.SequenceEqual(input.Wifi)
                ) && 
                (
                    this.Fallbacks == input.Fallbacks ||
                    (this.Fallbacks != null &&
                    this.Fallbacks.Equals(input.Fallbacks))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Bt == input.Bt ||
                    (this.Bt != null &&
                    this.Bt.Equals(input.Bt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Radio != null)
                    hashCode = hashCode * 59 + this.Radio.GetHashCode();
                if (this.Mcc != null)
                    hashCode = hashCode * 59 + this.Mcc.GetHashCode();
                if (this.Mnc != null)
                    hashCode = hashCode * 59 + this.Mnc.GetHashCode();
                if (this.Cells != null)
                    hashCode = hashCode * 59 + this.Cells.GetHashCode();
                if (this.Wifi != null)
                    hashCode = hashCode * 59 + this.Wifi.GetHashCode();
                if (this.Fallbacks != null)
                    hashCode = hashCode * 59 + this.Fallbacks.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.Bt != null)
                    hashCode = hashCode * 59 + this.Bt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
