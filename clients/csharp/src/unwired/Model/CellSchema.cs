/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = unwired.Client.OpenAPIDateConverter;

namespace unwired.Model
{
    /// <summary>
    /// You can send 1 to 7 cell ID objects. If your device supports scanning for more than 7 cell objects, reach out to us and we’ll increase this limit on your account. The first cell object has to be that of the serving cell, i.e. the tower the device is connected to. The others are neighbouring cell objects that are visible to the device. Except lac and cid all other parameters mentioned below are optional. Parameters vary depending on the radio type. Supported radio types and their corresponding parameters are
    /// </summary>
    [DataContract]
    public partial class CellSchema :  IEquatable<CellSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CellSchema" /> class.
        /// </summary>
        /// <param name="lac">the Location Area Code of your operator’s network..</param>
        /// <param name="cid">Cell ID.</param>
        /// <param name="radio">radio.</param>
        /// <param name="mcc">\&quot;Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\&quot;.</param>
        /// <param name="mnc">Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767..</param>
        /// <param name="signal">Signal Strength (RSSI).</param>
        /// <param name="psc">Primary Scrambling Code.</param>
        /// <param name="asu">Arbitrary Strength Unit.</param>
        /// <param name="ta">Timing Advance.</param>
        public CellSchema(long? lac = default(long?), long? cid = default(long?), RadioSchema radio = default(RadioSchema), long? mcc = default(long?), long? mnc = default(long?), long? signal = default(long?), long? psc = default(long?), long? asu = default(long?), long? ta = default(long?))
        {
            this.Lac = lac;
            this.Cid = cid;
            this.Radio = radio;
            this.Mcc = mcc;
            this.Mnc = mnc;
            this.Signal = signal;
            this.Psc = psc;
            this.Asu = asu;
            this.Ta = ta;
        }
        
        /// <summary>
        /// the Location Area Code of your operator’s network.
        /// </summary>
        /// <value>the Location Area Code of your operator’s network.</value>
        [DataMember(Name="lac", EmitDefaultValue=false)]
        public long? Lac { get; set; }

        /// <summary>
        /// Cell ID
        /// </summary>
        /// <value>Cell ID</value>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public long? Cid { get; set; }

        /// <summary>
        /// Gets or Sets Radio
        /// </summary>
        [DataMember(Name="radio", EmitDefaultValue=false)]
        public RadioSchema Radio { get; set; }

        /// <summary>
        /// \&quot;Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\&quot;
        /// </summary>
        /// <value>\&quot;Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\&quot;</value>
        [DataMember(Name="mcc", EmitDefaultValue=false)]
        public long? Mcc { get; set; }

        /// <summary>
        /// Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.
        /// </summary>
        /// <value>Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.</value>
        [DataMember(Name="mnc", EmitDefaultValue=false)]
        public long? Mnc { get; set; }

        /// <summary>
        /// Signal Strength (RSSI)
        /// </summary>
        /// <value>Signal Strength (RSSI)</value>
        [DataMember(Name="signal", EmitDefaultValue=false)]
        public long? Signal { get; set; }

        /// <summary>
        /// Primary Scrambling Code
        /// </summary>
        /// <value>Primary Scrambling Code</value>
        [DataMember(Name="psc", EmitDefaultValue=false)]
        public long? Psc { get; set; }

        /// <summary>
        /// Arbitrary Strength Unit
        /// </summary>
        /// <value>Arbitrary Strength Unit</value>
        [DataMember(Name="asu", EmitDefaultValue=false)]
        public long? Asu { get; set; }

        /// <summary>
        /// Timing Advance
        /// </summary>
        /// <value>Timing Advance</value>
        [DataMember(Name="ta", EmitDefaultValue=false)]
        public long? Ta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CellSchema {\n");
            sb.Append("  Lac: ").Append(Lac).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Radio: ").Append(Radio).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  Mnc: ").Append(Mnc).Append("\n");
            sb.Append("  Signal: ").Append(Signal).Append("\n");
            sb.Append("  Psc: ").Append(Psc).Append("\n");
            sb.Append("  Asu: ").Append(Asu).Append("\n");
            sb.Append("  Ta: ").Append(Ta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CellSchema);
        }

        /// <summary>
        /// Returns true if CellSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of CellSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CellSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Lac == input.Lac ||
                    (this.Lac != null &&
                    this.Lac.Equals(input.Lac))
                ) && 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.Radio == input.Radio ||
                    (this.Radio != null &&
                    this.Radio.Equals(input.Radio))
                ) && 
                (
                    this.Mcc == input.Mcc ||
                    (this.Mcc != null &&
                    this.Mcc.Equals(input.Mcc))
                ) && 
                (
                    this.Mnc == input.Mnc ||
                    (this.Mnc != null &&
                    this.Mnc.Equals(input.Mnc))
                ) && 
                (
                    this.Signal == input.Signal ||
                    (this.Signal != null &&
                    this.Signal.Equals(input.Signal))
                ) && 
                (
                    this.Psc == input.Psc ||
                    (this.Psc != null &&
                    this.Psc.Equals(input.Psc))
                ) && 
                (
                    this.Asu == input.Asu ||
                    (this.Asu != null &&
                    this.Asu.Equals(input.Asu))
                ) && 
                (
                    this.Ta == input.Ta ||
                    (this.Ta != null &&
                    this.Ta.Equals(input.Ta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Lac != null)
                    hashCode = hashCode * 59 + this.Lac.GetHashCode();
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                if (this.Radio != null)
                    hashCode = hashCode * 59 + this.Radio.GetHashCode();
                if (this.Mcc != null)
                    hashCode = hashCode * 59 + this.Mcc.GetHashCode();
                if (this.Mnc != null)
                    hashCode = hashCode * 59 + this.Mnc.GetHashCode();
                if (this.Signal != null)
                    hashCode = hashCode * 59 + this.Signal.GetHashCode();
                if (this.Psc != null)
                    hashCode = hashCode * 59 + this.Psc.GetHashCode();
                if (this.Asu != null)
                    hashCode = hashCode * 59 + this.Asu.GetHashCode();
                if (this.Ta != null)
                    hashCode = hashCode * 59 + this.Ta.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Lac (long?) maximum
            if(this.Lac > (long?)65533)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lac, must be a value less than or equal to 65533.", new [] { "Lac" });
            }

            // Lac (long?) minimum
            if(this.Lac < (long?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lac, must be a value greater than or equal to 1.", new [] { "Lac" });
            }

            // Cid (long?) maximum
            if(this.Cid > (long?)268435455)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cid, must be a value less than or equal to 268435455.", new [] { "Cid" });
            }

            // Cid (long?) minimum
            if(this.Cid < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cid, must be a value greater than or equal to 0.", new [] { "Cid" });
            }

            // Signal (long?) maximum
            if(this.Signal > (long?)-25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Signal, must be a value less than or equal to -25.", new [] { "Signal" });
            }

            // Signal (long?) minimum
            if(this.Signal < (long?)-121)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Signal, must be a value greater than or equal to -121.", new [] { "Signal" });
            }

            // Psc (long?) maximum
            if(this.Psc > (long?)503)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Psc, must be a value less than or equal to 503.", new [] { "Psc" });
            }

            // Psc (long?) minimum
            if(this.Psc < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Psc, must be a value greater than or equal to 0.", new [] { "Psc" });
            }

            // Asu (long?) maximum
            if(this.Asu > (long?)97)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Asu, must be a value less than or equal to 97.", new [] { "Asu" });
            }

            // Asu (long?) minimum
            if(this.Asu < (long?)-5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Asu, must be a value greater than or equal to -5.", new [] { "Asu" });
            }

            // Ta (long?) maximum
            if(this.Ta > (long?)63)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ta, must be a value less than or equal to 63.", new [] { "Ta" });
            }

            // Ta (long?) minimum
            if(this.Ta < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ta, must be a value greater than or equal to 0.", new [] { "Ta" });
            }

            yield break;
        }
    }

}
