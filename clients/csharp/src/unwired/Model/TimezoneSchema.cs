/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = unwired.Client.OpenAPIDateConverter;

namespace unwired.Model
{
    /// <summary>
    /// Timezone object found for the location.
    /// </summary>
    [DataContract]
    public partial class TimezoneSchema :  IEquatable<TimezoneSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimezoneSchema" /> class.
        /// </summary>
        /// <param name="shortName">Short name of the Timezone.</param>
        /// <param name="offsetSec">The offset from UTC (in seconds) for the given location. Considers DST savings..</param>
        /// <param name="nowInDst">Represents whether the zone currently observing DST or not.</param>
        /// <param name="name">Timezone name of the Location.</param>
        public TimezoneSchema(string shortName = default(string), decimal? offsetSec = default(decimal?), string nowInDst = default(string), string name = default(string))
        {
            this.ShortName = shortName;
            this.OffsetSec = offsetSec;
            this.NowInDst = nowInDst;
            this.Name = name;
        }
        
        /// <summary>
        /// Short name of the Timezone
        /// </summary>
        /// <value>Short name of the Timezone</value>
        [DataMember(Name="short_name", EmitDefaultValue=false)]
        public string ShortName { get; set; }

        /// <summary>
        /// The offset from UTC (in seconds) for the given location. Considers DST savings.
        /// </summary>
        /// <value>The offset from UTC (in seconds) for the given location. Considers DST savings.</value>
        [DataMember(Name="offset_sec", EmitDefaultValue=false)]
        public decimal? OffsetSec { get; set; }

        /// <summary>
        /// Represents whether the zone currently observing DST or not
        /// </summary>
        /// <value>Represents whether the zone currently observing DST or not</value>
        [DataMember(Name="now_in_dst", EmitDefaultValue=false)]
        public string NowInDst { get; set; }

        /// <summary>
        /// Timezone name of the Location
        /// </summary>
        /// <value>Timezone name of the Location</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimezoneSchema {\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  OffsetSec: ").Append(OffsetSec).Append("\n");
            sb.Append("  NowInDst: ").Append(NowInDst).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimezoneSchema);
        }

        /// <summary>
        /// Returns true if TimezoneSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of TimezoneSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimezoneSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShortName == input.ShortName ||
                    (this.ShortName != null &&
                    this.ShortName.Equals(input.ShortName))
                ) && 
                (
                    this.OffsetSec == input.OffsetSec ||
                    (this.OffsetSec != null &&
                    this.OffsetSec.Equals(input.OffsetSec))
                ) && 
                (
                    this.NowInDst == input.NowInDst ||
                    (this.NowInDst != null &&
                    this.NowInDst.Equals(input.NowInDst))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShortName != null)
                    hashCode = hashCode * 59 + this.ShortName.GetHashCode();
                if (this.OffsetSec != null)
                    hashCode = hashCode * 59 + this.OffsetSec.GetHashCode();
                if (this.NowInDst != null)
                    hashCode = hashCode * 59 + this.NowInDst.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
