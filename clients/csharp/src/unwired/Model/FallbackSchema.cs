/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = unwired.Client.OpenAPIDateConverter;

namespace unwired.Model
{
    /// <summary>
    /// An array of fallback options to enable or disable.
    /// </summary>
    [DataContract]
    public partial class FallbackSchema :  IEquatable<FallbackSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FallbackSchema" /> class.
        /// </summary>
        /// <param name="all">all.</param>
        /// <param name="ipf">ipf.</param>
        /// <param name="lacf">lacf.</param>
        /// <param name="scf">scf.</param>
        public FallbackSchema(AllSchema all = default(AllSchema), IpfSchema ipf = default(IpfSchema), LacfSchema lacf = default(LacfSchema), ScfSchema scf = default(ScfSchema))
        {
            this.All = all;
            this.Ipf = ipf;
            this.Lacf = lacf;
            this.Scf = scf;
        }
        
        /// <summary>
        /// Gets or Sets All
        /// </summary>
        [DataMember(Name="all", EmitDefaultValue=false)]
        public AllSchema All { get; set; }

        /// <summary>
        /// Gets or Sets Ipf
        /// </summary>
        [DataMember(Name="ipf", EmitDefaultValue=false)]
        public IpfSchema Ipf { get; set; }

        /// <summary>
        /// Gets or Sets Lacf
        /// </summary>
        [DataMember(Name="lacf", EmitDefaultValue=false)]
        public LacfSchema Lacf { get; set; }

        /// <summary>
        /// Gets or Sets Scf
        /// </summary>
        [DataMember(Name="scf", EmitDefaultValue=false)]
        public ScfSchema Scf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FallbackSchema {\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("  Ipf: ").Append(Ipf).Append("\n");
            sb.Append("  Lacf: ").Append(Lacf).Append("\n");
            sb.Append("  Scf: ").Append(Scf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FallbackSchema);
        }

        /// <summary>
        /// Returns true if FallbackSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of FallbackSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FallbackSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.All == input.All ||
                    (this.All != null &&
                    this.All.Equals(input.All))
                ) && 
                (
                    this.Ipf == input.Ipf ||
                    (this.Ipf != null &&
                    this.Ipf.Equals(input.Ipf))
                ) && 
                (
                    this.Lacf == input.Lacf ||
                    (this.Lacf != null &&
                    this.Lacf.Equals(input.Lacf))
                ) && 
                (
                    this.Scf == input.Scf ||
                    (this.Scf != null &&
                    this.Scf.Equals(input.Scf))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.All != null)
                    hashCode = hashCode * 59 + this.All.GetHashCode();
                if (this.Ipf != null)
                    hashCode = hashCode * 59 + this.Ipf.GetHashCode();
                if (this.Lacf != null)
                    hashCode = hashCode * 59 + this.Lacf.GetHashCode();
                if (this.Scf != null)
                    hashCode = hashCode * 59 + this.Scf.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
