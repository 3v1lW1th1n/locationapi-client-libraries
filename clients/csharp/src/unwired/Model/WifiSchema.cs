/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = unwired.Client.OpenAPIDateConverter;

namespace unwired.Model
{
    /// <summary>
    /// You can send a minimum of 2 and a maximum of 15 WiFi objects in 1 request. If WiFi is not available, wifi object can be omitted all together. In accordance with our industryâ€™s privacy standards we require a minimum of 2 valid nearby Access Points to be sent. If your use-case allows only 1 AP, reach out to us.
    /// </summary>
    [DataContract]
    public partial class WifiSchema :  IEquatable<WifiSchema>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WifiSchema" /> class.
        /// </summary>
        /// <param name="bssid">Basic Service Set Identifier or MAC address of the Access Point. Typical format of a MAC address is xx-xx-xx-xx-xx-xx. However, the delimiter can be any of these when sent to the API: : or - or ..</param>
        /// <param name="channel">Channel the WiFi network is operating in (optional).</param>
        /// <param name="frequency">Frequency the WiFi network is operating in (MHz) (optional).</param>
        /// <param name="signal">Signal Strength (RSSI).</param>
        /// <param name="signalToNoiseRatio">The current signal to noise ratio, measured in dB (optional).</param>
        public WifiSchema(string bssid = default(string), long? channel = default(long?), long? frequency = default(long?), long? signal = default(long?), long? signalToNoiseRatio = default(long?))
        {
            this.Bssid = bssid;
            this.Channel = channel;
            this.Frequency = frequency;
            this.Signal = signal;
            this.SignalToNoiseRatio = signalToNoiseRatio;
        }
        
        /// <summary>
        /// Basic Service Set Identifier or MAC address of the Access Point. Typical format of a MAC address is xx-xx-xx-xx-xx-xx. However, the delimiter can be any of these when sent to the API: : or - or .
        /// </summary>
        /// <value>Basic Service Set Identifier or MAC address of the Access Point. Typical format of a MAC address is xx-xx-xx-xx-xx-xx. However, the delimiter can be any of these when sent to the API: : or - or .</value>
        [DataMember(Name="bssid", EmitDefaultValue=false)]
        public string Bssid { get; set; }

        /// <summary>
        /// Channel the WiFi network is operating in (optional)
        /// </summary>
        /// <value>Channel the WiFi network is operating in (optional)</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public long? Channel { get; set; }

        /// <summary>
        /// Frequency the WiFi network is operating in (MHz) (optional)
        /// </summary>
        /// <value>Frequency the WiFi network is operating in (MHz) (optional)</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public long? Frequency { get; set; }

        /// <summary>
        /// Signal Strength (RSSI)
        /// </summary>
        /// <value>Signal Strength (RSSI)</value>
        [DataMember(Name="signal", EmitDefaultValue=false)]
        public long? Signal { get; set; }

        /// <summary>
        /// The current signal to noise ratio, measured in dB (optional)
        /// </summary>
        /// <value>The current signal to noise ratio, measured in dB (optional)</value>
        [DataMember(Name="signalToNoiseRatio", EmitDefaultValue=false)]
        public long? SignalToNoiseRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WifiSchema {\n");
            sb.Append("  Bssid: ").Append(Bssid).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Signal: ").Append(Signal).Append("\n");
            sb.Append("  SignalToNoiseRatio: ").Append(SignalToNoiseRatio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WifiSchema);
        }

        /// <summary>
        /// Returns true if WifiSchema instances are equal
        /// </summary>
        /// <param name="input">Instance of WifiSchema to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WifiSchema input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bssid == input.Bssid ||
                    (this.Bssid != null &&
                    this.Bssid.Equals(input.Bssid))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.Signal == input.Signal ||
                    (this.Signal != null &&
                    this.Signal.Equals(input.Signal))
                ) && 
                (
                    this.SignalToNoiseRatio == input.SignalToNoiseRatio ||
                    (this.SignalToNoiseRatio != null &&
                    this.SignalToNoiseRatio.Equals(input.SignalToNoiseRatio))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bssid != null)
                    hashCode = hashCode * 59 + this.Bssid.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.Signal != null)
                    hashCode = hashCode * 59 + this.Signal.GetHashCode();
                if (this.SignalToNoiseRatio != null)
                    hashCode = hashCode * 59 + this.SignalToNoiseRatio.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Signal (long?) maximum
            if(this.Signal > (long?)-25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Signal, must be a value less than or equal to -25.", new [] { "Signal" });
            }

            // Signal (long?) minimum
            if(this.Signal < (long?)-121)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Signal, must be a value greater than or equal to -121.", new [] { "Signal" });
            }

            yield break;
        }
    }

}
