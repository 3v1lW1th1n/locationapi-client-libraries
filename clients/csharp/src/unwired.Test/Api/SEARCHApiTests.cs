/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using unwired.Client;
using unwired.Api;

namespace unwired.Test
{
    /// <summary>
    ///  Class for testing SEARCHApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class SEARCHApiTests
    {
        private SEARCHApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SEARCHApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SEARCHApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SEARCHApi
            //Assert.IsInstanceOfType(typeof(SEARCHApi), instance, "instance is a SEARCHApi");
        }

        
        /// <summary>
        /// Test Search
        /// </summary>
        [Test]
        public void SearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //string viewbox = null;
            //long? limit = null;
            //string acceptLanguage = null;
            //string countrycodes = null;
            //var response = instance.Search(q, viewbox, limit, acceptLanguage, countrycodes);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
