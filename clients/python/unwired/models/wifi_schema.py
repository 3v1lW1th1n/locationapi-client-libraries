# coding: utf-8

"""
    Location API

    Geolocation, Geocoding and Maps  # noqa: E501

    OpenAPI spec version: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class WifiSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bssid': 'str',
        'channel': 'int',
        'frequency': 'int',
        'signal': 'int',
        'signal_to_noise_ratio': 'int'
    }

    attribute_map = {
        'bssid': 'bssid',
        'channel': 'channel',
        'frequency': 'frequency',
        'signal': 'signal',
        'signal_to_noise_ratio': 'signalToNoiseRatio'
    }

    def __init__(self, bssid=None, channel=None, frequency=None, signal=None, signal_to_noise_ratio=None):  # noqa: E501
        """WifiSchema - a model defined in OpenAPI"""  # noqa: E501

        self._bssid = None
        self._channel = None
        self._frequency = None
        self._signal = None
        self._signal_to_noise_ratio = None
        self.discriminator = None

        if bssid is not None:
            self.bssid = bssid
        if channel is not None:
            self.channel = channel
        if frequency is not None:
            self.frequency = frequency
        if signal is not None:
            self.signal = signal
        if signal_to_noise_ratio is not None:
            self.signal_to_noise_ratio = signal_to_noise_ratio

    @property
    def bssid(self):
        """Gets the bssid of this WifiSchema.  # noqa: E501

        Basic Service Set Identifier or MAC address of the Access Point. Typical format of a MAC address is xx-xx-xx-xx-xx-xx. However, the delimiter can be any of these when sent to the API: : or - or .  # noqa: E501

        :return: The bssid of this WifiSchema.  # noqa: E501
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid):
        """Sets the bssid of this WifiSchema.

        Basic Service Set Identifier or MAC address of the Access Point. Typical format of a MAC address is xx-xx-xx-xx-xx-xx. However, the delimiter can be any of these when sent to the API: : or - or .  # noqa: E501

        :param bssid: The bssid of this WifiSchema.  # noqa: E501
        :type: str
        """

        self._bssid = bssid

    @property
    def channel(self):
        """Gets the channel of this WifiSchema.  # noqa: E501

        Channel the WiFi network is operating in (optional)  # noqa: E501

        :return: The channel of this WifiSchema.  # noqa: E501
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this WifiSchema.

        Channel the WiFi network is operating in (optional)  # noqa: E501

        :param channel: The channel of this WifiSchema.  # noqa: E501
        :type: int
        """

        self._channel = channel

    @property
    def frequency(self):
        """Gets the frequency of this WifiSchema.  # noqa: E501

        Frequency the WiFi network is operating in (MHz) (optional)  # noqa: E501

        :return: The frequency of this WifiSchema.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this WifiSchema.

        Frequency the WiFi network is operating in (MHz) (optional)  # noqa: E501

        :param frequency: The frequency of this WifiSchema.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def signal(self):
        """Gets the signal of this WifiSchema.  # noqa: E501

        Signal Strength (RSSI)  # noqa: E501

        :return: The signal of this WifiSchema.  # noqa: E501
        :rtype: int
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this WifiSchema.

        Signal Strength (RSSI)  # noqa: E501

        :param signal: The signal of this WifiSchema.  # noqa: E501
        :type: int
        """
        if signal is not None and signal > -25:  # noqa: E501
            raise ValueError("Invalid value for `signal`, must be a value less than or equal to `-25`")  # noqa: E501
        if signal is not None and signal < -121:  # noqa: E501
            raise ValueError("Invalid value for `signal`, must be a value greater than or equal to `-121`")  # noqa: E501

        self._signal = signal

    @property
    def signal_to_noise_ratio(self):
        """Gets the signal_to_noise_ratio of this WifiSchema.  # noqa: E501

        The current signal to noise ratio, measured in dB (optional)  # noqa: E501

        :return: The signal_to_noise_ratio of this WifiSchema.  # noqa: E501
        :rtype: int
        """
        return self._signal_to_noise_ratio

    @signal_to_noise_ratio.setter
    def signal_to_noise_ratio(self, signal_to_noise_ratio):
        """Sets the signal_to_noise_ratio of this WifiSchema.

        The current signal to noise ratio, measured in dB (optional)  # noqa: E501

        :param signal_to_noise_ratio: The signal_to_noise_ratio of this WifiSchema.  # noqa: E501
        :type: int
        """

        self._signal_to_noise_ratio = signal_to_noise_ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WifiSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
