# coding: utf-8

"""
    Location API

    Geolocation, Geocoding and Maps  # noqa: E501

    OpenAPI spec version: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GeolocationSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token': 'str',
        'id': 'str',
        'radio': 'RadioSchema',
        'mcc': 'int',
        'mnc': 'int',
        'cells': 'list[CellSchema]',
        'wifi': 'list[WifiSchema]',
        'fallbacks': 'FallbackSchema',
        'address': 'GeolocationAddressSchema',
        'ip': 'str',
        'bt': 'BtSchema'
    }

    attribute_map = {
        'token': 'token',
        'id': 'id',
        'radio': 'radio',
        'mcc': 'mcc',
        'mnc': 'mnc',
        'cells': 'cells',
        'wifi': 'wifi',
        'fallbacks': 'fallbacks',
        'address': 'address',
        'ip': 'ip',
        'bt': 'bt'
    }

    def __init__(self, token=None, id=None, radio=None, mcc=None, mnc=None, cells=None, wifi=None, fallbacks=None, address=None, ip=None, bt=None):  # noqa: E501
        """GeolocationSchema - a model defined in OpenAPI"""  # noqa: E501

        self._token = None
        self._id = None
        self._radio = None
        self._mcc = None
        self._mnc = None
        self._cells = None
        self._wifi = None
        self._fallbacks = None
        self._address = None
        self._ip = None
        self._bt = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if id is not None:
            self.id = id
        if radio is not None:
            self.radio = radio
        if mcc is not None:
            self.mcc = mcc
        if mnc is not None:
            self.mnc = mnc
        if cells is not None:
            self.cells = cells
        if wifi is not None:
            self.wifi = wifi
        if fallbacks is not None:
            self.fallbacks = fallbacks
        if address is not None:
            self.address = address
        if ip is not None:
            self.ip = ip
        if bt is not None:
            self.bt = bt

    @property
    def token(self):
        """Gets the token of this GeolocationSchema.  # noqa: E501


        :return: The token of this GeolocationSchema.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GeolocationSchema.


        :param token: The token of this GeolocationSchema.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def id(self):
        """Gets the id of this GeolocationSchema.  # noqa: E501

        ID of the device, in case you are in a per-device plan. This could be any unique string such as an IMEI, IMSI, phone number or a hash of any of the previous values, etc. Maximum accepted length is 20 chars, and values should only be alphanumeric (a-z, 0-9)  # noqa: E501

        :return: The id of this GeolocationSchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GeolocationSchema.

        ID of the device, in case you are in a per-device plan. This could be any unique string such as an IMEI, IMSI, phone number or a hash of any of the previous values, etc. Maximum accepted length is 20 chars, and values should only be alphanumeric (a-z, 0-9)  # noqa: E501

        :param id: The id of this GeolocationSchema.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def radio(self):
        """Gets the radio of this GeolocationSchema.  # noqa: E501


        :return: The radio of this GeolocationSchema.  # noqa: E501
        :rtype: RadioSchema
        """
        return self._radio

    @radio.setter
    def radio(self, radio):
        """Sets the radio of this GeolocationSchema.


        :param radio: The radio of this GeolocationSchema.  # noqa: E501
        :type: RadioSchema
        """

        self._radio = radio

    @property
    def mcc(self):
        """Gets the mcc of this GeolocationSchema.  # noqa: E501

        \"Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\"  # noqa: E501

        :return: The mcc of this GeolocationSchema.  # noqa: E501
        :rtype: int
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this GeolocationSchema.

        \"Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\"  # noqa: E501

        :param mcc: The mcc of this GeolocationSchema.  # noqa: E501
        :type: int
        """

        self._mcc = mcc

    @property
    def mnc(self):
        """Gets the mnc of this GeolocationSchema.  # noqa: E501

        Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.  # noqa: E501

        :return: The mnc of this GeolocationSchema.  # noqa: E501
        :rtype: int
        """
        return self._mnc

    @mnc.setter
    def mnc(self, mnc):
        """Sets the mnc of this GeolocationSchema.

        Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.  # noqa: E501

        :param mnc: The mnc of this GeolocationSchema.  # noqa: E501
        :type: int
        """

        self._mnc = mnc

    @property
    def cells(self):
        """Gets the cells of this GeolocationSchema.  # noqa: E501

        An array of cell ID objects  # noqa: E501

        :return: The cells of this GeolocationSchema.  # noqa: E501
        :rtype: list[CellSchema]
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this GeolocationSchema.

        An array of cell ID objects  # noqa: E501

        :param cells: The cells of this GeolocationSchema.  # noqa: E501
        :type: list[CellSchema]
        """

        self._cells = cells

    @property
    def wifi(self):
        """Gets the wifi of this GeolocationSchema.  # noqa: E501

        An array of WiFi objects visible to the device.  # noqa: E501

        :return: The wifi of this GeolocationSchema.  # noqa: E501
        :rtype: list[WifiSchema]
        """
        return self._wifi

    @wifi.setter
    def wifi(self, wifi):
        """Sets the wifi of this GeolocationSchema.

        An array of WiFi objects visible to the device.  # noqa: E501

        :param wifi: The wifi of this GeolocationSchema.  # noqa: E501
        :type: list[WifiSchema]
        """

        self._wifi = wifi

    @property
    def fallbacks(self):
        """Gets the fallbacks of this GeolocationSchema.  # noqa: E501


        :return: The fallbacks of this GeolocationSchema.  # noqa: E501
        :rtype: FallbackSchema
        """
        return self._fallbacks

    @fallbacks.setter
    def fallbacks(self, fallbacks):
        """Sets the fallbacks of this GeolocationSchema.


        :param fallbacks: The fallbacks of this GeolocationSchema.  # noqa: E501
        :type: FallbackSchema
        """

        self._fallbacks = fallbacks

    @property
    def address(self):
        """Gets the address of this GeolocationSchema.  # noqa: E501


        :return: The address of this GeolocationSchema.  # noqa: E501
        :rtype: GeolocationAddressSchema
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this GeolocationSchema.


        :param address: The address of this GeolocationSchema.  # noqa: E501
        :type: GeolocationAddressSchema
        """

        self._address = address

    @property
    def ip(self):
        """Gets the ip of this GeolocationSchema.  # noqa: E501

        IP address of device.  # noqa: E501

        :return: The ip of this GeolocationSchema.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this GeolocationSchema.

        IP address of device.  # noqa: E501

        :param ip: The ip of this GeolocationSchema.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def bt(self):
        """Gets the bt of this GeolocationSchema.  # noqa: E501


        :return: The bt of this GeolocationSchema.  # noqa: E501
        :rtype: BtSchema
        """
        return self._bt

    @bt.setter
    def bt(self, bt):
        """Sets the bt of this GeolocationSchema.


        :param bt: The bt of this GeolocationSchema.  # noqa: E501
        :type: BtSchema
        """

        self._bt = bt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeolocationSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
