# coding: utf-8

"""
    Location API

    Geolocation, Geocoding and Maps  # noqa: E501

    OpenAPI spec version: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AddressDetailsSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'area': 'str',
        'locality': 'str',
        'district': 'str',
        'county': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'country_code': 'str',
        'postal_code': 'str'
    }

    attribute_map = {
        'area': 'area',
        'locality': 'locality',
        'district': 'district',
        'county': 'county',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'country_code': 'country_code',
        'postal_code': 'postal_code'
    }

    def __init__(self, area=None, locality=None, district=None, county=None, city=None, state=None, country=None, country_code=None, postal_code=None):  # noqa: E501
        """AddressDetailsSchema - a model defined in OpenAPI"""  # noqa: E501

        self._area = None
        self._locality = None
        self._district = None
        self._county = None
        self._city = None
        self._state = None
        self._country = None
        self._country_code = None
        self._postal_code = None
        self.discriminator = None

        if area is not None:
            self.area = area
        if locality is not None:
            self.locality = locality
        if district is not None:
            self.district = district
        if county is not None:
            self.county = county
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code
        if postal_code is not None:
            self.postal_code = postal_code

    @property
    def area(self):
        """Gets the area of this AddressDetailsSchema.  # noqa: E501


        :return: The area of this AddressDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this AddressDetailsSchema.


        :param area: The area of this AddressDetailsSchema.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def locality(self):
        """Gets the locality of this AddressDetailsSchema.  # noqa: E501


        :return: The locality of this AddressDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this AddressDetailsSchema.


        :param locality: The locality of this AddressDetailsSchema.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def district(self):
        """Gets the district of this AddressDetailsSchema.  # noqa: E501


        :return: The district of this AddressDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this AddressDetailsSchema.


        :param district: The district of this AddressDetailsSchema.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def county(self):
        """Gets the county of this AddressDetailsSchema.  # noqa: E501


        :return: The county of this AddressDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this AddressDetailsSchema.


        :param county: The county of this AddressDetailsSchema.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def city(self):
        """Gets the city of this AddressDetailsSchema.  # noqa: E501


        :return: The city of this AddressDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressDetailsSchema.


        :param city: The city of this AddressDetailsSchema.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this AddressDetailsSchema.  # noqa: E501


        :return: The state of this AddressDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AddressDetailsSchema.


        :param state: The state of this AddressDetailsSchema.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this AddressDetailsSchema.  # noqa: E501


        :return: The country of this AddressDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressDetailsSchema.


        :param country: The country of this AddressDetailsSchema.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this AddressDetailsSchema.  # noqa: E501


        :return: The country_code of this AddressDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this AddressDetailsSchema.


        :param country_code: The country_code of this AddressDetailsSchema.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressDetailsSchema.  # noqa: E501


        :return: The postal_code of this AddressDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressDetailsSchema.


        :param postal_code: The postal_code of this AddressDetailsSchema.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressDetailsSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
