# coding: utf-8

"""
    Location API

    Geolocation, Geocoding and Maps  # noqa: E501

    OpenAPI spec version: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BalanceResponseSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'balance_geolocation': 'int',
        'balance_geocoding': 'int'
    }

    attribute_map = {
        'status': 'status',
        'balance_geolocation': 'balance_geolocation',
        'balance_geocoding': 'balance_geocoding'
    }

    def __init__(self, status=None, balance_geolocation=None, balance_geocoding=None):  # noqa: E501
        """BalanceResponseSchema - a model defined in OpenAPI"""  # noqa: E501

        self._status = None
        self._balance_geolocation = None
        self._balance_geocoding = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if balance_geolocation is not None:
            self.balance_geolocation = balance_geolocation
        if balance_geocoding is not None:
            self.balance_geocoding = balance_geocoding

    @property
    def status(self):
        """Gets the status of this BalanceResponseSchema.  # noqa: E501

        If the request is successful, ok is returned. Otherwise error is returned  # noqa: E501

        :return: The status of this BalanceResponseSchema.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BalanceResponseSchema.

        If the request is successful, ok is returned. Otherwise error is returned  # noqa: E501

        :param status: The status of this BalanceResponseSchema.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def balance_geolocation(self):
        """Gets the balance_geolocation of this BalanceResponseSchema.  # noqa: E501

        Remaining balance left in the account for geolocation requests  # noqa: E501

        :return: The balance_geolocation of this BalanceResponseSchema.  # noqa: E501
        :rtype: int
        """
        return self._balance_geolocation

    @balance_geolocation.setter
    def balance_geolocation(self, balance_geolocation):
        """Sets the balance_geolocation of this BalanceResponseSchema.

        Remaining balance left in the account for geolocation requests  # noqa: E501

        :param balance_geolocation: The balance_geolocation of this BalanceResponseSchema.  # noqa: E501
        :type: int
        """

        self._balance_geolocation = balance_geolocation

    @property
    def balance_geocoding(self):
        """Gets the balance_geocoding of this BalanceResponseSchema.  # noqa: E501

        Remaining balance left in the account for geocoding requests  # noqa: E501

        :return: The balance_geocoding of this BalanceResponseSchema.  # noqa: E501
        :rtype: int
        """
        return self._balance_geocoding

    @balance_geocoding.setter
    def balance_geocoding(self, balance_geocoding):
        """Sets the balance_geocoding of this BalanceResponseSchema.

        Remaining balance left in the account for geocoding requests  # noqa: E501

        :param balance_geocoding: The balance_geocoding of this BalanceResponseSchema.  # noqa: E501
        :type: int
        """

        self._balance_geocoding = balance_geocoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceResponseSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
