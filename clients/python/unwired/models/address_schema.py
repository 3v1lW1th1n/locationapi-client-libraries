# coding: utf-8

"""
    Location API

    Geolocation, Geocoding and Maps  # noqa: E501

    OpenAPI spec version: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class AddressSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lat': 'str',
        'lon': 'str',
        'display_name': 'str',
        'house_number': 'str',
        'road': 'str',
        'neighborhood': 'str',
        'suburb': 'str',
        'city': 'str',
        'county': 'str',
        'country': 'str',
        'country_code': 'str',
        'postal_code': 'str'
    }

    attribute_map = {
        'lat': 'lat',
        'lon': 'lon',
        'display_name': 'display_name',
        'house_number': 'house_number',
        'road': 'road',
        'neighborhood': 'neighborhood',
        'suburb': 'suburb',
        'city': 'city',
        'county': 'county',
        'country': 'country',
        'country_code': 'country_code',
        'postal_code': 'postal_code'
    }

    def __init__(self, lat=None, lon=None, display_name=None, house_number=None, road=None, neighborhood=None, suburb=None, city=None, county=None, country=None, country_code=None, postal_code=None):  # noqa: E501
        """AddressSchema - a model defined in OpenAPI"""  # noqa: E501

        self._lat = None
        self._lon = None
        self._display_name = None
        self._house_number = None
        self._road = None
        self._neighborhood = None
        self._suburb = None
        self._city = None
        self._county = None
        self._country = None
        self._country_code = None
        self._postal_code = None
        self.discriminator = None

        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon
        if display_name is not None:
            self.display_name = display_name
        if house_number is not None:
            self.house_number = house_number
        if road is not None:
            self.road = road
        if neighborhood is not None:
            self.neighborhood = neighborhood
        if suburb is not None:
            self.suburb = suburb
        if city is not None:
            self.city = city
        if county is not None:
            self.county = county
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code
        if postal_code is not None:
            self.postal_code = postal_code

    @property
    def lat(self):
        """Gets the lat of this AddressSchema.  # noqa: E501

        Latitude of the given location (decimal)  # noqa: E501

        :return: The lat of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this AddressSchema.

        Latitude of the given location (decimal)  # noqa: E501

        :param lat: The lat of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this AddressSchema.  # noqa: E501

        Longitude of the given location (decimal)  # noqa: E501

        :return: The lon of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this AddressSchema.

        Longitude of the given location (decimal)  # noqa: E501

        :param lon: The lon of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._lon = lon

    @property
    def display_name(self):
        """Gets the display_name of this AddressSchema.  # noqa: E501

        Matched Address name for the given location  # noqa: E501

        :return: The display_name of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AddressSchema.

        Matched Address name for the given location  # noqa: E501

        :param display_name: The display_name of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def house_number(self):
        """Gets the house_number of this AddressSchema.  # noqa: E501

        House Number  # noqa: E501

        :return: The house_number of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this AddressSchema.

        House Number  # noqa: E501

        :param house_number: The house_number of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._house_number = house_number

    @property
    def road(self):
        """Gets the road of this AddressSchema.  # noqa: E501

        Road Name  # noqa: E501

        :return: The road of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._road

    @road.setter
    def road(self, road):
        """Sets the road of this AddressSchema.

        Road Name  # noqa: E501

        :param road: The road of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._road = road

    @property
    def neighborhood(self):
        """Gets the neighborhood of this AddressSchema.  # noqa: E501

        Neighbourhood  # noqa: E501

        :return: The neighborhood of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._neighborhood

    @neighborhood.setter
    def neighborhood(self, neighborhood):
        """Sets the neighborhood of this AddressSchema.

        Neighbourhood  # noqa: E501

        :param neighborhood: The neighborhood of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._neighborhood = neighborhood

    @property
    def suburb(self):
        """Gets the suburb of this AddressSchema.  # noqa: E501

        Suburb  # noqa: E501

        :return: The suburb of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this AddressSchema.

        Suburb  # noqa: E501

        :param suburb: The suburb of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def city(self):
        """Gets the city of this AddressSchema.  # noqa: E501

        City name (normalized form of city, town, village, hamlet)  # noqa: E501

        :return: The city of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressSchema.

        City name (normalized form of city, town, village, hamlet)  # noqa: E501

        :param city: The city of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def county(self):
        """Gets the county of this AddressSchema.  # noqa: E501

        County name (normalized form of county, state_district)  # noqa: E501

        :return: The county of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this AddressSchema.

        County name (normalized form of county, state_district)  # noqa: E501

        :param county: The county of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def country(self):
        """Gets the country of this AddressSchema.  # noqa: E501

        Country name  # noqa: E501

        :return: The country of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressSchema.

        Country name  # noqa: E501

        :param country: The country of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this AddressSchema.  # noqa: E501

        Country code  # noqa: E501

        :return: The country_code of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this AddressSchema.

        Country code  # noqa: E501

        :param country_code: The country_code of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressSchema.  # noqa: E501

        Postal code  # noqa: E501

        :return: The postal_code of this AddressSchema.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressSchema.

        Postal code  # noqa: E501

        :param postal_code: The postal_code of this AddressSchema.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
