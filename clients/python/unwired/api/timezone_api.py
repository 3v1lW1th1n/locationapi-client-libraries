# coding: utf-8

"""
    Location API

    Geolocation, Geocoding and Maps  # noqa: E501

    OpenAPI spec version: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from unwired.api_client import ApiClient


class TimezoneApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def timezone(self, lat, lon, **kwargs):  # noqa: E501
        """timezone  # noqa: E501

        The Unwired Labs TimeZone API provides time offset data for locations on the surface of the earth.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timezone(lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: lattitude of the location (required)
        :param float lon: longitude of location (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.timezone_with_http_info(lat, lon, **kwargs)  # noqa: E501
        else:
            (data) = self.timezone_with_http_info(lat, lon, **kwargs)  # noqa: E501
            return data

    def timezone_with_http_info(self, lat, lon, **kwargs):  # noqa: E501
        """timezone  # noqa: E501

        The Unwired Labs TimeZone API provides time offset data for locations on the surface of the earth.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.timezone_with_http_info(lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float lat: lattitude of the location (required)
        :param float lon: longitude of location (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['lat', 'lon']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method timezone" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'lat' is set
        if ('lat' not in local_var_params or
                local_var_params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `timezone`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in local_var_params or
                local_var_params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `timezone`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'lat' in local_var_params:
            query_params.append(('lat', local_var_params['lat']))  # noqa: E501
        if 'lon' in local_var_params:
            query_params.append(('lon', local_var_params['lon']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['token']  # noqa: E501

        return self.api_client.call_api(
            '/timezone.php', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
