=begin
#Location API

#Geolocation, Geocoding and Maps

OpenAPI spec version: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'date'

module unwiredClient
  # You can send 1 to 7 cell ID objects. If your device supports scanning for more than 7 cell objects, reach out to us and we’ll increase this limit on your account. The first cell object has to be that of the serving cell, i.e. the tower the device is connected to. The others are neighbouring cell objects that are visible to the device. Except lac and cid all other parameters mentioned below are optional. Parameters vary depending on the radio type. Supported radio types and their corresponding parameters are
  class CellSchema
    # the Location Area Code of your operator’s network.
    attr_accessor :lac

    # Cell ID
    attr_accessor :cid

    attr_accessor :radio

    # \"Mobile Country Code of your operator’s network represented by an integer (Optional). Range: 0 to 999.\"
    attr_accessor :mcc

    # Mobile Network Code of your operator’s network represented by an integer (Optional). Range: 0 to 999. On CDMA, provide the System ID or SID, with range: 1 to 32767.
    attr_accessor :mnc

    # Signal Strength (RSSI)
    attr_accessor :signal

    # Primary Scrambling Code
    attr_accessor :psc

    # Arbitrary Strength Unit
    attr_accessor :asu

    # Timing Advance
    attr_accessor :ta

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'lac' => :'lac',
        :'cid' => :'cid',
        :'radio' => :'radio',
        :'mcc' => :'mcc',
        :'mnc' => :'mnc',
        :'signal' => :'signal',
        :'psc' => :'psc',
        :'asu' => :'asu',
        :'ta' => :'ta'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'lac' => :'Integer',
        :'cid' => :'Integer',
        :'radio' => :'RadioSchema',
        :'mcc' => :'Integer',
        :'mnc' => :'Integer',
        :'signal' => :'Integer',
        :'psc' => :'Integer',
        :'asu' => :'Integer',
        :'ta' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'lac')
        self.lac = attributes[:'lac']
      end

      if attributes.has_key?(:'cid')
        self.cid = attributes[:'cid']
      end

      if attributes.has_key?(:'radio')
        self.radio = attributes[:'radio']
      end

      if attributes.has_key?(:'mcc')
        self.mcc = attributes[:'mcc']
      end

      if attributes.has_key?(:'mnc')
        self.mnc = attributes[:'mnc']
      end

      if attributes.has_key?(:'signal')
        self.signal = attributes[:'signal']
      end

      if attributes.has_key?(:'psc')
        self.psc = attributes[:'psc']
      end

      if attributes.has_key?(:'asu')
        self.asu = attributes[:'asu']
      end

      if attributes.has_key?(:'ta')
        self.ta = attributes[:'ta']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@lac.nil? && @lac > 65533
        invalid_properties.push('invalid value for "lac", must be smaller than or equal to 65533.')
      end

      if !@lac.nil? && @lac < 1
        invalid_properties.push('invalid value for "lac", must be greater than or equal to 1.')
      end

      if !@cid.nil? && @cid > 268435455
        invalid_properties.push('invalid value for "cid", must be smaller than or equal to 268435455.')
      end

      if !@cid.nil? && @cid < 0
        invalid_properties.push('invalid value for "cid", must be greater than or equal to 0.')
      end

      if !@signal.nil? && @signal > -25
        invalid_properties.push('invalid value for "signal", must be smaller than or equal to -25.')
      end

      if !@signal.nil? && @signal < -121
        invalid_properties.push('invalid value for "signal", must be greater than or equal to -121.')
      end

      if !@psc.nil? && @psc > 503
        invalid_properties.push('invalid value for "psc", must be smaller than or equal to 503.')
      end

      if !@psc.nil? && @psc < 0
        invalid_properties.push('invalid value for "psc", must be greater than or equal to 0.')
      end

      if !@asu.nil? && @asu > 97
        invalid_properties.push('invalid value for "asu", must be smaller than or equal to 97.')
      end

      if !@asu.nil? && @asu < -5
        invalid_properties.push('invalid value for "asu", must be greater than or equal to -5.')
      end

      if !@ta.nil? && @ta > 63
        invalid_properties.push('invalid value for "ta", must be smaller than or equal to 63.')
      end

      if !@ta.nil? && @ta < 0
        invalid_properties.push('invalid value for "ta", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@lac.nil? && @lac > 65533
      return false if !@lac.nil? && @lac < 1
      return false if !@cid.nil? && @cid > 268435455
      return false if !@cid.nil? && @cid < 0
      return false if !@signal.nil? && @signal > -25
      return false if !@signal.nil? && @signal < -121
      return false if !@psc.nil? && @psc > 503
      return false if !@psc.nil? && @psc < 0
      return false if !@asu.nil? && @asu > 97
      return false if !@asu.nil? && @asu < -5
      return false if !@ta.nil? && @ta > 63
      return false if !@ta.nil? && @ta < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] lac Value to be assigned
    def lac=(lac)
      if !lac.nil? && lac > 65533
        fail ArgumentError, 'invalid value for "lac", must be smaller than or equal to 65533.'
      end

      if !lac.nil? && lac < 1
        fail ArgumentError, 'invalid value for "lac", must be greater than or equal to 1.'
      end

      @lac = lac
    end

    # Custom attribute writer method with validation
    # @param [Object] cid Value to be assigned
    def cid=(cid)
      if !cid.nil? && cid > 268435455
        fail ArgumentError, 'invalid value for "cid", must be smaller than or equal to 268435455.'
      end

      if !cid.nil? && cid < 0
        fail ArgumentError, 'invalid value for "cid", must be greater than or equal to 0.'
      end

      @cid = cid
    end

    # Custom attribute writer method with validation
    # @param [Object] signal Value to be assigned
    def signal=(signal)
      if !signal.nil? && signal > -25
        fail ArgumentError, 'invalid value for "signal", must be smaller than or equal to -25.'
      end

      if !signal.nil? && signal < -121
        fail ArgumentError, 'invalid value for "signal", must be greater than or equal to -121.'
      end

      @signal = signal
    end

    # Custom attribute writer method with validation
    # @param [Object] psc Value to be assigned
    def psc=(psc)
      if !psc.nil? && psc > 503
        fail ArgumentError, 'invalid value for "psc", must be smaller than or equal to 503.'
      end

      if !psc.nil? && psc < 0
        fail ArgumentError, 'invalid value for "psc", must be greater than or equal to 0.'
      end

      @psc = psc
    end

    # Custom attribute writer method with validation
    # @param [Object] asu Value to be assigned
    def asu=(asu)
      if !asu.nil? && asu > 97
        fail ArgumentError, 'invalid value for "asu", must be smaller than or equal to 97.'
      end

      if !asu.nil? && asu < -5
        fail ArgumentError, 'invalid value for "asu", must be greater than or equal to -5.'
      end

      @asu = asu
    end

    # Custom attribute writer method with validation
    # @param [Object] ta Value to be assigned
    def ta=(ta)
      if !ta.nil? && ta > 63
        fail ArgumentError, 'invalid value for "ta", must be smaller than or equal to 63.'
      end

      if !ta.nil? && ta < 0
        fail ArgumentError, 'invalid value for "ta", must be greater than or equal to 0.'
      end

      @ta = ta
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          lac == o.lac &&
          cid == o.cid &&
          radio == o.radio &&
          mcc == o.mcc &&
          mnc == o.mnc &&
          signal == o.signal &&
          psc == o.psc &&
          asu == o.asu &&
          ta == o.ta
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [lac, cid, radio, mcc, mnc, signal, psc, asu, ta].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = unwiredClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
