=begin
#Location API

#Geolocation, Geocoding and Maps

OpenAPI spec version: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'date'

module unwiredClient
  # You can send a minimum of 2 and a maximum of 15 WiFi objects in 1 request. If WiFi is not available, wifi object can be omitted all together. In accordance with our industryâ€™s privacy standards we require a minimum of 2 valid nearby Access Points to be sent. If your use-case allows only 1 AP, reach out to us.
  class WifiSchema
    # Basic Service Set Identifier or MAC address of the Access Point. Typical format of a MAC address is xx-xx-xx-xx-xx-xx. However, the delimiter can be any of these when sent to the API: : or - or .
    attr_accessor :bssid

    # Channel the WiFi network is operating in (optional)
    attr_accessor :channel

    # Frequency the WiFi network is operating in (MHz) (optional)
    attr_accessor :frequency

    # Signal Strength (RSSI)
    attr_accessor :signal

    # The current signal to noise ratio, measured in dB (optional)
    attr_accessor :signal_to_noise_ratio

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'bssid' => :'bssid',
        :'channel' => :'channel',
        :'frequency' => :'frequency',
        :'signal' => :'signal',
        :'signal_to_noise_ratio' => :'signalToNoiseRatio'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'bssid' => :'String',
        :'channel' => :'Integer',
        :'frequency' => :'Integer',
        :'signal' => :'Integer',
        :'signal_to_noise_ratio' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'bssid')
        self.bssid = attributes[:'bssid']
      end

      if attributes.has_key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.has_key?(:'frequency')
        self.frequency = attributes[:'frequency']
      end

      if attributes.has_key?(:'signal')
        self.signal = attributes[:'signal']
      end

      if attributes.has_key?(:'signalToNoiseRatio')
        self.signal_to_noise_ratio = attributes[:'signalToNoiseRatio']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@signal.nil? && @signal > -25
        invalid_properties.push('invalid value for "signal", must be smaller than or equal to -25.')
      end

      if !@signal.nil? && @signal < -121
        invalid_properties.push('invalid value for "signal", must be greater than or equal to -121.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@signal.nil? && @signal > -25
      return false if !@signal.nil? && @signal < -121
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] signal Value to be assigned
    def signal=(signal)
      if !signal.nil? && signal > -25
        fail ArgumentError, 'invalid value for "signal", must be smaller than or equal to -25.'
      end

      if !signal.nil? && signal < -121
        fail ArgumentError, 'invalid value for "signal", must be greater than or equal to -121.'
      end

      @signal = signal
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          bssid == o.bssid &&
          channel == o.channel &&
          frequency == o.frequency &&
          signal == o.signal &&
          signal_to_noise_ratio == o.signal_to_noise_ratio
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [bssid, channel, frequency, signal, signal_to_noise_ratio].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = unwiredClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
