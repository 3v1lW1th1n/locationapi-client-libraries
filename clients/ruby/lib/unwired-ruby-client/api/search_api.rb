=begin
#Location API

#Geolocation, Geocoding and Maps

OpenAPI spec version: 2.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module unwiredClient
  class SEARCHApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Forward Geocoding
    # The Search API allows converting addresses, such as a street address, into geographic coordinates (latitude and longitude). These coordinates can serve various use-cases, from placing markers on a map to helping algorithms determine nearby bus stops. This process is also known as Forward Geocoding.
    # @param q Address to geocode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box. 
    # @option opts [Integer] :limit Limit the number of returned results. Default is 10. (default to 10)
    # @option opts [String] :accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native
    # @option opts [String] :countrycodes Limit search to a list of countries.
    # @return [Object]
    def search(q, opts = {})
      data, _status_code, _headers = search_with_http_info(q, opts)
      data
    end

    # Forward Geocoding
    # The Search API allows converting addresses, such as a street address, into geographic coordinates (latitude and longitude). These coordinates can serve various use-cases, from placing markers on a map to helping algorithms determine nearby bus stops. This process is also known as Forward Geocoding.
    # @param q Address to geocode
    # @param [Hash] opts the optional parameters
    # @option opts [String] :viewbox The preferred area to find search results.  To restrict results to those within the viewbox, use along with the bounded option. Tuple of 4 floats. Any two corner points of the box - &#x60;max_lon,max_lat,min_lon,min_lat&#x60; or &#x60;min_lon,min_lat,max_lon,max_lat&#x60; - are accepted in any order as long as they span a real box. 
    # @option opts [Integer] :limit Limit the number of returned results. Default is 10.
    # @option opts [String] :accept_language Preferred language order for showing search results, overrides the value specified in the Accept-Language HTTP header. Defaults to en. To use native language for the response when available, use accept-language&#x3D;native
    # @option opts [String] :countrycodes Limit search to a list of countries.
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def search_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SEARCHApi.search ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling SEARCHApi.search"
      end
      # resource path
      local_var_path = '/search.php'

      # query parameters
      query_params = {}
      query_params[:'q'] = q
      query_params[:'viewbox'] = opts[:'viewbox'] if !opts[:'viewbox'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'accept-language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?
      query_params[:'countrycodes'] = opts[:'countrycodes'] if !opts[:'countrycodes'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SEARCHApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
