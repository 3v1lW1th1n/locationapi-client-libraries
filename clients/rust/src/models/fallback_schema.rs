/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// FallbackSchema : An array of fallback options to enable or disable.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FallbackSchema {
  #[serde(rename = "all")]
  all: Option<::models::AllSchema>,
  #[serde(rename = "ipf")]
  ipf: Option<::models::IpfSchema>,
  #[serde(rename = "lacf")]
  lacf: Option<::models::LacfSchema>,
  #[serde(rename = "scf")]
  scf: Option<::models::ScfSchema>
}

impl FallbackSchema {
  /// An array of fallback options to enable or disable.
  pub fn new() -> FallbackSchema {
    FallbackSchema {
      all: None,
      ipf: None,
      lacf: None,
      scf: None
    }
  }

  pub fn set_all(&mut self, all: ::models::AllSchema) {
    self.all = Some(all);
  }

  pub fn with_all(mut self, all: ::models::AllSchema) -> FallbackSchema {
    self.all = Some(all);
    self
  }

  pub fn all(&self) -> Option<&::models::AllSchema> {
    self.all.as_ref()
  }

  pub fn reset_all(&mut self) {
    self.all = None;
  }

  pub fn set_ipf(&mut self, ipf: ::models::IpfSchema) {
    self.ipf = Some(ipf);
  }

  pub fn with_ipf(mut self, ipf: ::models::IpfSchema) -> FallbackSchema {
    self.ipf = Some(ipf);
    self
  }

  pub fn ipf(&self) -> Option<&::models::IpfSchema> {
    self.ipf.as_ref()
  }

  pub fn reset_ipf(&mut self) {
    self.ipf = None;
  }

  pub fn set_lacf(&mut self, lacf: ::models::LacfSchema) {
    self.lacf = Some(lacf);
  }

  pub fn with_lacf(mut self, lacf: ::models::LacfSchema) -> FallbackSchema {
    self.lacf = Some(lacf);
    self
  }

  pub fn lacf(&self) -> Option<&::models::LacfSchema> {
    self.lacf.as_ref()
  }

  pub fn reset_lacf(&mut self) {
    self.lacf = None;
  }

  pub fn set_scf(&mut self, scf: ::models::ScfSchema) {
    self.scf = Some(scf);
  }

  pub fn with_scf(mut self, scf: ::models::ScfSchema) -> FallbackSchema {
    self.scf = Some(scf);
    self
  }

  pub fn scf(&self) -> Option<&::models::ScfSchema> {
    self.scf.as_ref()
  }

  pub fn reset_scf(&mut self) {
    self.scf = None;
  }

}



