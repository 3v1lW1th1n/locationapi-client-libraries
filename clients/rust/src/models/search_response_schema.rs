/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SearchResponseSchema {
  /// If the request is successful, ok is returned. Otherwise error is returned
  #[serde(rename = "status")]
  status: Option<String>,
  /// Balance left in the account
  #[serde(rename = "balance")]
  balance: Option<f32>,
  /// Array of Address objects found for the search query
  #[serde(rename = "addresses")]
  addresses: Option<Vec<::models::AddressSchema>>
}

impl SearchResponseSchema {
  pub fn new() -> SearchResponseSchema {
    SearchResponseSchema {
      status: None,
      balance: None,
      addresses: None
    }
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> SearchResponseSchema {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_balance(&mut self, balance: f32) {
    self.balance = Some(balance);
  }

  pub fn with_balance(mut self, balance: f32) -> SearchResponseSchema {
    self.balance = Some(balance);
    self
  }

  pub fn balance(&self) -> Option<&f32> {
    self.balance.as_ref()
  }

  pub fn reset_balance(&mut self) {
    self.balance = None;
  }

  pub fn set_addresses(&mut self, addresses: Vec<::models::AddressSchema>) {
    self.addresses = Some(addresses);
  }

  pub fn with_addresses(mut self, addresses: Vec<::models::AddressSchema>) -> SearchResponseSchema {
    self.addresses = Some(addresses);
    self
  }

  pub fn addresses(&self) -> Option<&Vec<::models::AddressSchema>> {
    self.addresses.as_ref()
  }

  pub fn reset_addresses(&mut self) {
    self.addresses = None;
  }

}



