/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AddressDetailsSchema : The API only returns components that have valid values for a location. Component town is normalized to city to make things simple

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AddressDetailsSchema {
  #[serde(rename = "area")]
  area: Option<String>,
  #[serde(rename = "locality")]
  locality: Option<String>,
  #[serde(rename = "district")]
  district: Option<String>,
  #[serde(rename = "county")]
  county: Option<String>,
  #[serde(rename = "city")]
  city: Option<String>,
  #[serde(rename = "state")]
  state: Option<String>,
  #[serde(rename = "country")]
  country: Option<String>,
  #[serde(rename = "country_code")]
  country_code: Option<String>,
  #[serde(rename = "postal_code")]
  postal_code: Option<String>
}

impl AddressDetailsSchema {
  /// The API only returns components that have valid values for a location. Component town is normalized to city to make things simple
  pub fn new() -> AddressDetailsSchema {
    AddressDetailsSchema {
      area: None,
      locality: None,
      district: None,
      county: None,
      city: None,
      state: None,
      country: None,
      country_code: None,
      postal_code: None
    }
  }

  pub fn set_area(&mut self, area: String) {
    self.area = Some(area);
  }

  pub fn with_area(mut self, area: String) -> AddressDetailsSchema {
    self.area = Some(area);
    self
  }

  pub fn area(&self) -> Option<&String> {
    self.area.as_ref()
  }

  pub fn reset_area(&mut self) {
    self.area = None;
  }

  pub fn set_locality(&mut self, locality: String) {
    self.locality = Some(locality);
  }

  pub fn with_locality(mut self, locality: String) -> AddressDetailsSchema {
    self.locality = Some(locality);
    self
  }

  pub fn locality(&self) -> Option<&String> {
    self.locality.as_ref()
  }

  pub fn reset_locality(&mut self) {
    self.locality = None;
  }

  pub fn set_district(&mut self, district: String) {
    self.district = Some(district);
  }

  pub fn with_district(mut self, district: String) -> AddressDetailsSchema {
    self.district = Some(district);
    self
  }

  pub fn district(&self) -> Option<&String> {
    self.district.as_ref()
  }

  pub fn reset_district(&mut self) {
    self.district = None;
  }

  pub fn set_county(&mut self, county: String) {
    self.county = Some(county);
  }

  pub fn with_county(mut self, county: String) -> AddressDetailsSchema {
    self.county = Some(county);
    self
  }

  pub fn county(&self) -> Option<&String> {
    self.county.as_ref()
  }

  pub fn reset_county(&mut self) {
    self.county = None;
  }

  pub fn set_city(&mut self, city: String) {
    self.city = Some(city);
  }

  pub fn with_city(mut self, city: String) -> AddressDetailsSchema {
    self.city = Some(city);
    self
  }

  pub fn city(&self) -> Option<&String> {
    self.city.as_ref()
  }

  pub fn reset_city(&mut self) {
    self.city = None;
  }

  pub fn set_state(&mut self, state: String) {
    self.state = Some(state);
  }

  pub fn with_state(mut self, state: String) -> AddressDetailsSchema {
    self.state = Some(state);
    self
  }

  pub fn state(&self) -> Option<&String> {
    self.state.as_ref()
  }

  pub fn reset_state(&mut self) {
    self.state = None;
  }

  pub fn set_country(&mut self, country: String) {
    self.country = Some(country);
  }

  pub fn with_country(mut self, country: String) -> AddressDetailsSchema {
    self.country = Some(country);
    self
  }

  pub fn country(&self) -> Option<&String> {
    self.country.as_ref()
  }

  pub fn reset_country(&mut self) {
    self.country = None;
  }

  pub fn set_country_code(&mut self, country_code: String) {
    self.country_code = Some(country_code);
  }

  pub fn with_country_code(mut self, country_code: String) -> AddressDetailsSchema {
    self.country_code = Some(country_code);
    self
  }

  pub fn country_code(&self) -> Option<&String> {
    self.country_code.as_ref()
  }

  pub fn reset_country_code(&mut self) {
    self.country_code = None;
  }

  pub fn set_postal_code(&mut self, postal_code: String) {
    self.postal_code = Some(postal_code);
  }

  pub fn with_postal_code(mut self, postal_code: String) -> AddressDetailsSchema {
    self.postal_code = Some(postal_code);
    self
  }

  pub fn postal_code(&self) -> Option<&String> {
    self.postal_code.as_ref()
  }

  pub fn reset_postal_code(&mut self) {
    self.postal_code = None;
  }

}



