/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// TimezoneSchema : Timezone object found for the location.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TimezoneSchema {
  /// Short name of the Timezone
  #[serde(rename = "short_name")]
  short_name: Option<String>,
  /// The offset from UTC (in seconds) for the given location. Considers DST savings.
  #[serde(rename = "offset_sec")]
  offset_sec: Option<f32>,
  /// Represents whether the zone currently observing DST or not
  #[serde(rename = "now_in_dst")]
  now_in_dst: Option<String>,
  /// Timezone name of the Location
  #[serde(rename = "name")]
  name: Option<String>
}

impl TimezoneSchema {
  /// Timezone object found for the location.
  pub fn new() -> TimezoneSchema {
    TimezoneSchema {
      short_name: None,
      offset_sec: None,
      now_in_dst: None,
      name: None
    }
  }

  pub fn set_short_name(&mut self, short_name: String) {
    self.short_name = Some(short_name);
  }

  pub fn with_short_name(mut self, short_name: String) -> TimezoneSchema {
    self.short_name = Some(short_name);
    self
  }

  pub fn short_name(&self) -> Option<&String> {
    self.short_name.as_ref()
  }

  pub fn reset_short_name(&mut self) {
    self.short_name = None;
  }

  pub fn set_offset_sec(&mut self, offset_sec: f32) {
    self.offset_sec = Some(offset_sec);
  }

  pub fn with_offset_sec(mut self, offset_sec: f32) -> TimezoneSchema {
    self.offset_sec = Some(offset_sec);
    self
  }

  pub fn offset_sec(&self) -> Option<&f32> {
    self.offset_sec.as_ref()
  }

  pub fn reset_offset_sec(&mut self) {
    self.offset_sec = None;
  }

  pub fn set_now_in_dst(&mut self, now_in_dst: String) {
    self.now_in_dst = Some(now_in_dst);
  }

  pub fn with_now_in_dst(mut self, now_in_dst: String) -> TimezoneSchema {
    self.now_in_dst = Some(now_in_dst);
    self
  }

  pub fn now_in_dst(&self) -> Option<&String> {
    self.now_in_dst.as_ref()
  }

  pub fn reset_now_in_dst(&mut self) {
    self.now_in_dst = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> TimezoneSchema {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



