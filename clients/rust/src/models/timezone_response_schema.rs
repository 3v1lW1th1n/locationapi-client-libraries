/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TimezoneResponseSchema {
  /// If the request is successful, ok is returned. Otherwise error is returned
  #[serde(rename = "status")]
  status: Option<String>,
  /// Balance left in the account
  #[serde(rename = "balance")]
  balance: Option<i64>,
  #[serde(rename = "timezone")]
  timezone: Option<::models::TimezoneSchema>
}

impl TimezoneResponseSchema {
  pub fn new() -> TimezoneResponseSchema {
    TimezoneResponseSchema {
      status: None,
      balance: None,
      timezone: None
    }
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> TimezoneResponseSchema {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_balance(&mut self, balance: i64) {
    self.balance = Some(balance);
  }

  pub fn with_balance(mut self, balance: i64) -> TimezoneResponseSchema {
    self.balance = Some(balance);
    self
  }

  pub fn balance(&self) -> Option<&i64> {
    self.balance.as_ref()
  }

  pub fn reset_balance(&mut self) {
    self.balance = None;
  }

  pub fn set_timezone(&mut self, timezone: ::models::TimezoneSchema) {
    self.timezone = Some(timezone);
  }

  pub fn with_timezone(mut self, timezone: ::models::TimezoneSchema) -> TimezoneResponseSchema {
    self.timezone = Some(timezone);
    self
  }

  pub fn timezone(&self) -> Option<&::models::TimezoneSchema> {
    self.timezone.as_ref()
  }

  pub fn reset_timezone(&mut self) {
    self.timezone = None;
  }

}



