/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// AddressSchema : Address object found for the search query

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AddressSchema {
  /// Latitude of the given location (decimal)
  #[serde(rename = "lat")]
  lat: Option<String>,
  /// Longitude of the given location (decimal)
  #[serde(rename = "lon")]
  lon: Option<String>,
  /// Matched Address name for the given location
  #[serde(rename = "display_name")]
  display_name: Option<String>,
  /// House Number
  #[serde(rename = "house_number")]
  house_number: Option<String>,
  /// Road Name
  #[serde(rename = "road")]
  road: Option<String>,
  /// Neighbourhood
  #[serde(rename = "neighborhood")]
  neighborhood: Option<String>,
  /// Suburb
  #[serde(rename = "suburb")]
  suburb: Option<String>,
  /// City name (normalized form of city, town, village, hamlet)
  #[serde(rename = "city")]
  city: Option<String>,
  /// County name (normalized form of county, state_district)
  #[serde(rename = "county")]
  county: Option<String>,
  /// Country name
  #[serde(rename = "country")]
  country: Option<String>,
  /// Country code
  #[serde(rename = "country_code")]
  country_code: Option<String>,
  /// Postal code
  #[serde(rename = "postal_code")]
  postal_code: Option<String>
}

impl AddressSchema {
  /// Address object found for the search query
  pub fn new() -> AddressSchema {
    AddressSchema {
      lat: None,
      lon: None,
      display_name: None,
      house_number: None,
      road: None,
      neighborhood: None,
      suburb: None,
      city: None,
      county: None,
      country: None,
      country_code: None,
      postal_code: None
    }
  }

  pub fn set_lat(&mut self, lat: String) {
    self.lat = Some(lat);
  }

  pub fn with_lat(mut self, lat: String) -> AddressSchema {
    self.lat = Some(lat);
    self
  }

  pub fn lat(&self) -> Option<&String> {
    self.lat.as_ref()
  }

  pub fn reset_lat(&mut self) {
    self.lat = None;
  }

  pub fn set_lon(&mut self, lon: String) {
    self.lon = Some(lon);
  }

  pub fn with_lon(mut self, lon: String) -> AddressSchema {
    self.lon = Some(lon);
    self
  }

  pub fn lon(&self) -> Option<&String> {
    self.lon.as_ref()
  }

  pub fn reset_lon(&mut self) {
    self.lon = None;
  }

  pub fn set_display_name(&mut self, display_name: String) {
    self.display_name = Some(display_name);
  }

  pub fn with_display_name(mut self, display_name: String) -> AddressSchema {
    self.display_name = Some(display_name);
    self
  }

  pub fn display_name(&self) -> Option<&String> {
    self.display_name.as_ref()
  }

  pub fn reset_display_name(&mut self) {
    self.display_name = None;
  }

  pub fn set_house_number(&mut self, house_number: String) {
    self.house_number = Some(house_number);
  }

  pub fn with_house_number(mut self, house_number: String) -> AddressSchema {
    self.house_number = Some(house_number);
    self
  }

  pub fn house_number(&self) -> Option<&String> {
    self.house_number.as_ref()
  }

  pub fn reset_house_number(&mut self) {
    self.house_number = None;
  }

  pub fn set_road(&mut self, road: String) {
    self.road = Some(road);
  }

  pub fn with_road(mut self, road: String) -> AddressSchema {
    self.road = Some(road);
    self
  }

  pub fn road(&self) -> Option<&String> {
    self.road.as_ref()
  }

  pub fn reset_road(&mut self) {
    self.road = None;
  }

  pub fn set_neighborhood(&mut self, neighborhood: String) {
    self.neighborhood = Some(neighborhood);
  }

  pub fn with_neighborhood(mut self, neighborhood: String) -> AddressSchema {
    self.neighborhood = Some(neighborhood);
    self
  }

  pub fn neighborhood(&self) -> Option<&String> {
    self.neighborhood.as_ref()
  }

  pub fn reset_neighborhood(&mut self) {
    self.neighborhood = None;
  }

  pub fn set_suburb(&mut self, suburb: String) {
    self.suburb = Some(suburb);
  }

  pub fn with_suburb(mut self, suburb: String) -> AddressSchema {
    self.suburb = Some(suburb);
    self
  }

  pub fn suburb(&self) -> Option<&String> {
    self.suburb.as_ref()
  }

  pub fn reset_suburb(&mut self) {
    self.suburb = None;
  }

  pub fn set_city(&mut self, city: String) {
    self.city = Some(city);
  }

  pub fn with_city(mut self, city: String) -> AddressSchema {
    self.city = Some(city);
    self
  }

  pub fn city(&self) -> Option<&String> {
    self.city.as_ref()
  }

  pub fn reset_city(&mut self) {
    self.city = None;
  }

  pub fn set_county(&mut self, county: String) {
    self.county = Some(county);
  }

  pub fn with_county(mut self, county: String) -> AddressSchema {
    self.county = Some(county);
    self
  }

  pub fn county(&self) -> Option<&String> {
    self.county.as_ref()
  }

  pub fn reset_county(&mut self) {
    self.county = None;
  }

  pub fn set_country(&mut self, country: String) {
    self.country = Some(country);
  }

  pub fn with_country(mut self, country: String) -> AddressSchema {
    self.country = Some(country);
    self
  }

  pub fn country(&self) -> Option<&String> {
    self.country.as_ref()
  }

  pub fn reset_country(&mut self) {
    self.country = None;
  }

  pub fn set_country_code(&mut self, country_code: String) {
    self.country_code = Some(country_code);
  }

  pub fn with_country_code(mut self, country_code: String) -> AddressSchema {
    self.country_code = Some(country_code);
    self
  }

  pub fn country_code(&self) -> Option<&String> {
    self.country_code.as_ref()
  }

  pub fn reset_country_code(&mut self) {
    self.country_code = None;
  }

  pub fn set_postal_code(&mut self, postal_code: String) {
    self.postal_code = Some(postal_code);
  }

  pub fn with_postal_code(mut self, postal_code: String) -> AddressSchema {
    self.postal_code = Some(postal_code);
    self
  }

  pub fn postal_code(&self) -> Option<&String> {
    self.postal_code.as_ref()
  }

  pub fn reset_postal_code(&mut self) {
    self.postal_code = None;
  }

}



