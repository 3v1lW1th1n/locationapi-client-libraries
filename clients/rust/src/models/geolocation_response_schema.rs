/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// GeolocationResponseSchema : The response will be a JSON object.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GeolocationResponseSchema {
  /// If the request is successful, ok is returned. Otherwise error is returned
  #[serde(rename = "status")]
  status: Option<String>,
  /// Any additional information from the server is returned here
  #[serde(rename = "message")]
  message: Option<String>,
  /// This represents the remaining balance on the API token. Requests that return error are not charged and do not affect balance
  #[serde(rename = "balance")]
  balance: Option<i64>,
  /// This represents the remaining balance of device slots. Requests that return error are not charged and do not affect balance. If -1 is returned, then observe it as an error while calculating slots balance. This element will only exist if you are on a device plan.
  #[serde(rename = "balance_slots")]
  balance_slots: Option<i64>,
  /// The latitude representing the location
  #[serde(rename = "lat")]
  lat: Option<f64>,
  /// The longitude representing the location
  #[serde(rename = "lon")]
  lon: Option<f64>,
  /// The accuracy of the position is returned in meters
  #[serde(rename = "accuracy")]
  accuracy: Option<i64>,
  /// The physical address of the location
  #[serde(rename = "address")]
  address: Option<String>,
  #[serde(rename = "address_details")]
  address_details: Option<::models::AddressDetailsSchema>,
  /// Shown when the location is based on a single measurement or those older than 90 days or is an LAC fallback
  #[serde(rename = "aged")]
  aged: Option<i32>,
  #[serde(rename = "fallback")]
  fallback: Option<::models::FallbackSchema>
}

impl GeolocationResponseSchema {
  /// The response will be a JSON object.
  pub fn new() -> GeolocationResponseSchema {
    GeolocationResponseSchema {
      status: None,
      message: None,
      balance: None,
      balance_slots: None,
      lat: None,
      lon: None,
      accuracy: None,
      address: None,
      address_details: None,
      aged: None,
      fallback: None
    }
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> GeolocationResponseSchema {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> GeolocationResponseSchema {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_balance(&mut self, balance: i64) {
    self.balance = Some(balance);
  }

  pub fn with_balance(mut self, balance: i64) -> GeolocationResponseSchema {
    self.balance = Some(balance);
    self
  }

  pub fn balance(&self) -> Option<&i64> {
    self.balance.as_ref()
  }

  pub fn reset_balance(&mut self) {
    self.balance = None;
  }

  pub fn set_balance_slots(&mut self, balance_slots: i64) {
    self.balance_slots = Some(balance_slots);
  }

  pub fn with_balance_slots(mut self, balance_slots: i64) -> GeolocationResponseSchema {
    self.balance_slots = Some(balance_slots);
    self
  }

  pub fn balance_slots(&self) -> Option<&i64> {
    self.balance_slots.as_ref()
  }

  pub fn reset_balance_slots(&mut self) {
    self.balance_slots = None;
  }

  pub fn set_lat(&mut self, lat: f64) {
    self.lat = Some(lat);
  }

  pub fn with_lat(mut self, lat: f64) -> GeolocationResponseSchema {
    self.lat = Some(lat);
    self
  }

  pub fn lat(&self) -> Option<&f64> {
    self.lat.as_ref()
  }

  pub fn reset_lat(&mut self) {
    self.lat = None;
  }

  pub fn set_lon(&mut self, lon: f64) {
    self.lon = Some(lon);
  }

  pub fn with_lon(mut self, lon: f64) -> GeolocationResponseSchema {
    self.lon = Some(lon);
    self
  }

  pub fn lon(&self) -> Option<&f64> {
    self.lon.as_ref()
  }

  pub fn reset_lon(&mut self) {
    self.lon = None;
  }

  pub fn set_accuracy(&mut self, accuracy: i64) {
    self.accuracy = Some(accuracy);
  }

  pub fn with_accuracy(mut self, accuracy: i64) -> GeolocationResponseSchema {
    self.accuracy = Some(accuracy);
    self
  }

  pub fn accuracy(&self) -> Option<&i64> {
    self.accuracy.as_ref()
  }

  pub fn reset_accuracy(&mut self) {
    self.accuracy = None;
  }

  pub fn set_address(&mut self, address: String) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: String) -> GeolocationResponseSchema {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&String> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_address_details(&mut self, address_details: ::models::AddressDetailsSchema) {
    self.address_details = Some(address_details);
  }

  pub fn with_address_details(mut self, address_details: ::models::AddressDetailsSchema) -> GeolocationResponseSchema {
    self.address_details = Some(address_details);
    self
  }

  pub fn address_details(&self) -> Option<&::models::AddressDetailsSchema> {
    self.address_details.as_ref()
  }

  pub fn reset_address_details(&mut self) {
    self.address_details = None;
  }

  pub fn set_aged(&mut self, aged: i32) {
    self.aged = Some(aged);
  }

  pub fn with_aged(mut self, aged: i32) -> GeolocationResponseSchema {
    self.aged = Some(aged);
    self
  }

  pub fn aged(&self) -> Option<&i32> {
    self.aged.as_ref()
  }

  pub fn reset_aged(&mut self) {
    self.aged = None;
  }

  pub fn set_fallback(&mut self, fallback: ::models::FallbackSchema) {
    self.fallback = Some(fallback);
  }

  pub fn with_fallback(mut self, fallback: ::models::FallbackSchema) -> GeolocationResponseSchema {
    self.fallback = Some(fallback);
    self
  }

  pub fn fallback(&self) -> Option<&::models::FallbackSchema> {
    self.fallback.as_ref()
  }

  pub fn reset_fallback(&mut self) {
    self.fallback = None;
  }

}



