/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct BALANCEApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> BALANCEApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> BALANCEApiClient<C> {
        BALANCEApiClient {
            configuration: configuration,
        }
    }
}

pub trait BALANCEApi {
    fn balance(&self, ) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>BALANCEApi for BALANCEApiClient<C> {
    fn balance(&self, ) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/balance.php".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "token".to_owned(),
            }))
            .execute(self.configuration.borrow())
    }

}
