/* 
 * Location API
 *
 * Geolocation, Geocoding and Maps
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SEARCHApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SEARCHApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SEARCHApiClient<C> {
        SEARCHApiClient {
            configuration: configuration,
        }
    }
}

pub trait SEARCHApi {
    fn search(&self, q: &str, viewbox: &str, limit: i64, accept_language: &str, countrycodes: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>SEARCHApi for SEARCHApiClient<C> {
    fn search(&self, q: &str, viewbox: &str, limit: i64, accept_language: &str, countrycodes: &str) -> Box<Future<Item = Value, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/search.php".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "token".to_owned(),
            }))
            .with_query_param("q".to_string(), q.to_string())
            .with_query_param("viewbox".to_string(), viewbox.to_string())
            .with_query_param("limit".to_string(), limit.to_string())
            .with_query_param("accept-language".to_string(), accept_language.to_string())
            .with_query_param("countrycodes".to_string(), countrycodes.to_string())
            .execute(self.configuration.borrow())
    }

}
